# type: ignore
# generated by datamodel-codegen:
#   filename:  schema.json
#   timestamp: 2022-11-18T00:07:21+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional, Union

from pydantic import BaseModel, Field


class Properties(BaseModel):
    SkillId: Optional[str] = None


class Type(Enum):
    AlexaSkill = "AlexaSkill"


class AlexaSkillEvent(BaseModel):
    Properties: Optional[Properties] = None
    Type: Type


class RequestModel(BaseModel):
    Model: str
    Required: Optional[bool] = None
    ValidateBody: Optional[bool] = None
    ValidateParameters: Optional[bool] = None


class RequestParameters(BaseModel):
    Caching: Optional[bool] = None
    Required: Optional[bool] = None


class Type1(Enum):
    Api = "Api"


class Type2(Enum):
    AWS__Serverless__Api = "AWS::Serverless::Api"


class Type3(Enum):
    AWS__Serverless__Application = "AWS::Serverless::Application"


class Type4(Enum):
    AWS__Serverless__Function = "AWS::Serverless::Function"


class Properties5(BaseModel):
    AccessLogSettings: Optional[Any] = None
    Auth: Optional[Any] = None
    CorsConfiguration: Optional[Any] = None
    DefaultRouteSettings: Optional[Any] = None
    DefinitionBody: Optional[Any] = None
    DefinitionUri: Optional[Any] = None
    Description: Optional[Any] = None
    DisableExecuteApiEndpoint: Optional[Any] = None
    Domain: Optional[Any] = None
    FailOnWarnings: Optional[Any] = None
    RouteSettings: Optional[Any] = None
    StageName: Optional[Any] = None
    StageVariables: Optional[Any] = None
    Tags: Optional[Any] = None


class Type5(Enum):
    AWS__Serverless__HttpApi = "AWS::Serverless::HttpApi"


class AwsServerlessHttpApi(BaseModel):
    Properties: Optional[Properties5] = None
    Type: Type5


class Type6(Enum):
    AWS__Serverless__LayerVersion = "AWS::Serverless::LayerVersion"


class Type7(Enum):
    AWS__Serverless__SimpleTable = "AWS::Serverless::SimpleTable"


class Type8(Enum):
    AWS__Serverless__StateMachine = "AWS::Serverless::StateMachine"


class CfnJson(BaseModel):
    __root__: Any


class CfnResourceType(Enum):
    AWS__ACMPCA__Certificate = "AWS::ACMPCA::Certificate"
    AWS__ACMPCA__CertificateAuthority = "AWS::ACMPCA::CertificateAuthority"
    AWS__ACMPCA__CertificateAuthorityActivation = "AWS::ACMPCA::CertificateAuthorityActivation"
    AWS__ACMPCA__Permission = "AWS::ACMPCA::Permission"
    AWS__APS__RuleGroupsNamespace = "AWS::APS::RuleGroupsNamespace"
    AWS__APS__Workspace = "AWS::APS::Workspace"
    AWS__AccessAnalyzer__Analyzer = "AWS::AccessAnalyzer::Analyzer"
    AWS__AmazonMQ__Broker = "AWS::AmazonMQ::Broker"
    AWS__AmazonMQ__Configuration = "AWS::AmazonMQ::Configuration"
    AWS__AmazonMQ__ConfigurationAssociation = "AWS::AmazonMQ::ConfigurationAssociation"
    AWS__Amplify__App = "AWS::Amplify::App"
    AWS__Amplify__Branch = "AWS::Amplify::Branch"
    AWS__Amplify__Domain = "AWS::Amplify::Domain"
    AWS__AmplifyUIBuilder__Component = "AWS::AmplifyUIBuilder::Component"
    AWS__AmplifyUIBuilder__Theme = "AWS::AmplifyUIBuilder::Theme"
    AWS__ApiGateway__Account = "AWS::ApiGateway::Account"
    AWS__ApiGateway__ApiKey = "AWS::ApiGateway::ApiKey"
    AWS__ApiGateway__Authorizer = "AWS::ApiGateway::Authorizer"
    AWS__ApiGateway__BasePathMapping = "AWS::ApiGateway::BasePathMapping"
    AWS__ApiGateway__ClientCertificate = "AWS::ApiGateway::ClientCertificate"
    AWS__ApiGateway__Deployment = "AWS::ApiGateway::Deployment"
    AWS__ApiGateway__DocumentationPart = "AWS::ApiGateway::DocumentationPart"
    AWS__ApiGateway__DocumentationVersion = "AWS::ApiGateway::DocumentationVersion"
    AWS__ApiGateway__DomainName = "AWS::ApiGateway::DomainName"
    AWS__ApiGateway__GatewayResponse = "AWS::ApiGateway::GatewayResponse"
    AWS__ApiGateway__Method = "AWS::ApiGateway::Method"
    AWS__ApiGateway__Model = "AWS::ApiGateway::Model"
    AWS__ApiGateway__RequestValidator = "AWS::ApiGateway::RequestValidator"
    AWS__ApiGateway__Resource = "AWS::ApiGateway::Resource"
    AWS__ApiGateway__RestApi = "AWS::ApiGateway::RestApi"
    AWS__ApiGateway__Stage = "AWS::ApiGateway::Stage"
    AWS__ApiGateway__UsagePlan = "AWS::ApiGateway::UsagePlan"
    AWS__ApiGateway__UsagePlanKey = "AWS::ApiGateway::UsagePlanKey"
    AWS__ApiGateway__VpcLink = "AWS::ApiGateway::VpcLink"
    AWS__ApiGatewayV2__Api = "AWS::ApiGatewayV2::Api"
    AWS__ApiGatewayV2__ApiGatewayManagedOverrides = "AWS::ApiGatewayV2::ApiGatewayManagedOverrides"
    AWS__ApiGatewayV2__ApiMapping = "AWS::ApiGatewayV2::ApiMapping"
    AWS__ApiGatewayV2__Authorizer = "AWS::ApiGatewayV2::Authorizer"
    AWS__ApiGatewayV2__Deployment = "AWS::ApiGatewayV2::Deployment"
    AWS__ApiGatewayV2__DomainName = "AWS::ApiGatewayV2::DomainName"
    AWS__ApiGatewayV2__Integration = "AWS::ApiGatewayV2::Integration"
    AWS__ApiGatewayV2__IntegrationResponse = "AWS::ApiGatewayV2::IntegrationResponse"
    AWS__ApiGatewayV2__Model = "AWS::ApiGatewayV2::Model"
    AWS__ApiGatewayV2__Route = "AWS::ApiGatewayV2::Route"
    AWS__ApiGatewayV2__RouteResponse = "AWS::ApiGatewayV2::RouteResponse"
    AWS__ApiGatewayV2__Stage = "AWS::ApiGatewayV2::Stage"
    AWS__ApiGatewayV2__VpcLink = "AWS::ApiGatewayV2::VpcLink"
    AWS__AppConfig__Application = "AWS::AppConfig::Application"
    AWS__AppConfig__ConfigurationProfile = "AWS::AppConfig::ConfigurationProfile"
    AWS__AppConfig__Deployment = "AWS::AppConfig::Deployment"
    AWS__AppConfig__DeploymentStrategy = "AWS::AppConfig::DeploymentStrategy"
    AWS__AppConfig__Environment = "AWS::AppConfig::Environment"
    AWS__AppConfig__HostedConfigurationVersion = "AWS::AppConfig::HostedConfigurationVersion"
    AWS__AppFlow__ConnectorProfile = "AWS::AppFlow::ConnectorProfile"
    AWS__AppFlow__Flow = "AWS::AppFlow::Flow"
    AWS__AppMesh__GatewayRoute = "AWS::AppMesh::GatewayRoute"
    AWS__AppMesh__Mesh = "AWS::AppMesh::Mesh"
    AWS__AppMesh__Route = "AWS::AppMesh::Route"
    AWS__AppMesh__VirtualGateway = "AWS::AppMesh::VirtualGateway"
    AWS__AppMesh__VirtualNode = "AWS::AppMesh::VirtualNode"
    AWS__AppMesh__VirtualRouter = "AWS::AppMesh::VirtualRouter"
    AWS__AppMesh__VirtualService = "AWS::AppMesh::VirtualService"
    AWS__AppRunner__ObservabilityConfiguration = "AWS::AppRunner::ObservabilityConfiguration"
    AWS__AppRunner__Service = "AWS::AppRunner::Service"
    AWS__AppRunner__VpcConnector = "AWS::AppRunner::VpcConnector"
    AWS__AppStream__AppBlock = "AWS::AppStream::AppBlock"
    AWS__AppStream__Application = "AWS::AppStream::Application"
    AWS__AppStream__ApplicationEntitlementAssociation = "AWS::AppStream::ApplicationEntitlementAssociation"
    AWS__AppStream__ApplicationFleetAssociation = "AWS::AppStream::ApplicationFleetAssociation"
    AWS__AppStream__DirectoryConfig = "AWS::AppStream::DirectoryConfig"
    AWS__AppStream__Entitlement = "AWS::AppStream::Entitlement"
    AWS__AppStream__Fleet = "AWS::AppStream::Fleet"
    AWS__AppStream__ImageBuilder = "AWS::AppStream::ImageBuilder"
    AWS__AppStream__Stack = "AWS::AppStream::Stack"
    AWS__AppStream__StackFleetAssociation = "AWS::AppStream::StackFleetAssociation"
    AWS__AppStream__StackUserAssociation = "AWS::AppStream::StackUserAssociation"
    AWS__AppStream__User = "AWS::AppStream::User"
    AWS__AppSync__ApiCache = "AWS::AppSync::ApiCache"
    AWS__AppSync__ApiKey = "AWS::AppSync::ApiKey"
    AWS__AppSync__DataSource = "AWS::AppSync::DataSource"
    AWS__AppSync__DomainName = "AWS::AppSync::DomainName"
    AWS__AppSync__DomainNameApiAssociation = "AWS::AppSync::DomainNameApiAssociation"
    AWS__AppSync__FunctionConfiguration = "AWS::AppSync::FunctionConfiguration"
    AWS__AppSync__GraphQLApi = "AWS::AppSync::GraphQLApi"
    AWS__AppSync__GraphQLSchema = "AWS::AppSync::GraphQLSchema"
    AWS__AppSync__Resolver = "AWS::AppSync::Resolver"
    AWS__ApplicationAutoScaling__ScalableTarget = "AWS::ApplicationAutoScaling::ScalableTarget"
    AWS__ApplicationAutoScaling__ScalingPolicy = "AWS::ApplicationAutoScaling::ScalingPolicy"
    AWS__ApplicationInsights__Application = "AWS::ApplicationInsights::Application"
    AWS__Athena__DataCatalog = "AWS::Athena::DataCatalog"
    AWS__Athena__NamedQuery = "AWS::Athena::NamedQuery"
    AWS__Athena__PreparedStatement = "AWS::Athena::PreparedStatement"
    AWS__Athena__WorkGroup = "AWS::Athena::WorkGroup"
    AWS__AuditManager__Assessment = "AWS::AuditManager::Assessment"
    AWS__AutoScaling__AutoScalingGroup = "AWS::AutoScaling::AutoScalingGroup"
    AWS__AutoScaling__LaunchConfiguration = "AWS::AutoScaling::LaunchConfiguration"
    AWS__AutoScaling__LifecycleHook = "AWS::AutoScaling::LifecycleHook"
    AWS__AutoScaling__ScalingPolicy = "AWS::AutoScaling::ScalingPolicy"
    AWS__AutoScaling__ScheduledAction = "AWS::AutoScaling::ScheduledAction"
    AWS__AutoScaling__WarmPool = "AWS::AutoScaling::WarmPool"
    AWS__AutoScalingPlans__ScalingPlan = "AWS::AutoScalingPlans::ScalingPlan"
    AWS__Backup__BackupPlan = "AWS::Backup::BackupPlan"
    AWS__Backup__BackupSelection = "AWS::Backup::BackupSelection"
    AWS__Backup__BackupVault = "AWS::Backup::BackupVault"
    AWS__Backup__Framework = "AWS::Backup::Framework"
    AWS__Backup__ReportPlan = "AWS::Backup::ReportPlan"
    AWS__Batch__ComputeEnvironment = "AWS::Batch::ComputeEnvironment"
    AWS__Batch__JobDefinition = "AWS::Batch::JobDefinition"
    AWS__Batch__JobQueue = "AWS::Batch::JobQueue"
    AWS__Batch__SchedulingPolicy = "AWS::Batch::SchedulingPolicy"
    AWS__Budgets__Budget = "AWS::Budgets::Budget"
    AWS__Budgets__BudgetsAction = "AWS::Budgets::BudgetsAction"
    AWS__CE__CostCategory = "AWS::CE::CostCategory"
    AWS__Cassandra__Keyspace = "AWS::Cassandra::Keyspace"
    AWS__Cassandra__Table = "AWS::Cassandra::Table"
    AWS__CertificateManager__Account = "AWS::CertificateManager::Account"
    AWS__CertificateManager__Certificate = "AWS::CertificateManager::Certificate"
    AWS__Chatbot__SlackChannelConfiguration = "AWS::Chatbot::SlackChannelConfiguration"
    AWS__Cloud9__EnvironmentEC2 = "AWS::Cloud9::EnvironmentEC2"
    AWS__CloudFormation__CustomResource = "AWS::CloudFormation::CustomResource"
    AWS__CloudFormation__HookDefaultVersion = "AWS::CloudFormation::HookDefaultVersion"
    AWS__CloudFormation__HookTypeConfig = "AWS::CloudFormation::HookTypeConfig"
    AWS__CloudFormation__HookVersion = "AWS::CloudFormation::HookVersion"
    AWS__CloudFormation__Macro = "AWS::CloudFormation::Macro"
    AWS__CloudFormation__ModuleDefaultVersion = "AWS::CloudFormation::ModuleDefaultVersion"
    AWS__CloudFormation__ModuleVersion = "AWS::CloudFormation::ModuleVersion"
    AWS__CloudFormation__PublicTypeVersion = "AWS::CloudFormation::PublicTypeVersion"
    AWS__CloudFormation__Publisher = "AWS::CloudFormation::Publisher"
    AWS__CloudFormation__ResourceDefaultVersion = "AWS::CloudFormation::ResourceDefaultVersion"
    AWS__CloudFormation__ResourceVersion = "AWS::CloudFormation::ResourceVersion"
    AWS__CloudFormation__Stack = "AWS::CloudFormation::Stack"
    AWS__CloudFormation__StackSet = "AWS::CloudFormation::StackSet"
    AWS__CloudFormation__TypeActivation = "AWS::CloudFormation::TypeActivation"
    AWS__CloudFormation__WaitCondition = "AWS::CloudFormation::WaitCondition"
    AWS__CloudFormation__WaitConditionHandle = "AWS::CloudFormation::WaitConditionHandle"
    AWS__CloudFront__CachePolicy = "AWS::CloudFront::CachePolicy"
    AWS__CloudFront__CloudFrontOriginAccessIdentity = "AWS::CloudFront::CloudFrontOriginAccessIdentity"
    AWS__CloudFront__Distribution = "AWS::CloudFront::Distribution"
    AWS__CloudFront__Function = "AWS::CloudFront::Function"
    AWS__CloudFront__KeyGroup = "AWS::CloudFront::KeyGroup"
    AWS__CloudFront__OriginRequestPolicy = "AWS::CloudFront::OriginRequestPolicy"
    AWS__CloudFront__PublicKey = "AWS::CloudFront::PublicKey"
    AWS__CloudFront__RealtimeLogConfig = "AWS::CloudFront::RealtimeLogConfig"
    AWS__CloudFront__ResponseHeadersPolicy = "AWS::CloudFront::ResponseHeadersPolicy"
    AWS__CloudFront__StreamingDistribution = "AWS::CloudFront::StreamingDistribution"
    AWS__CloudTrail__EventDataStore = "AWS::CloudTrail::EventDataStore"
    AWS__CloudTrail__Trail = "AWS::CloudTrail::Trail"
    AWS__CloudWatch__Alarm = "AWS::CloudWatch::Alarm"
    AWS__CloudWatch__AnomalyDetector = "AWS::CloudWatch::AnomalyDetector"
    AWS__CloudWatch__CompositeAlarm = "AWS::CloudWatch::CompositeAlarm"
    AWS__CloudWatch__Dashboard = "AWS::CloudWatch::Dashboard"
    AWS__CloudWatch__InsightRule = "AWS::CloudWatch::InsightRule"
    AWS__CloudWatch__MetricStream = "AWS::CloudWatch::MetricStream"
    AWS__CodeArtifact__Domain = "AWS::CodeArtifact::Domain"
    AWS__CodeArtifact__Repository = "AWS::CodeArtifact::Repository"
    AWS__CodeBuild__Project = "AWS::CodeBuild::Project"
    AWS__CodeBuild__ReportGroup = "AWS::CodeBuild::ReportGroup"
    AWS__CodeBuild__SourceCredential = "AWS::CodeBuild::SourceCredential"
    AWS__CodeCommit__Repository = "AWS::CodeCommit::Repository"
    AWS__CodeDeploy__Application = "AWS::CodeDeploy::Application"
    AWS__CodeDeploy__DeploymentConfig = "AWS::CodeDeploy::DeploymentConfig"
    AWS__CodeDeploy__DeploymentGroup = "AWS::CodeDeploy::DeploymentGroup"
    AWS__CodeGuruProfiler__ProfilingGroup = "AWS::CodeGuruProfiler::ProfilingGroup"
    AWS__CodeGuruReviewer__RepositoryAssociation = "AWS::CodeGuruReviewer::RepositoryAssociation"
    AWS__CodePipeline__CustomActionType = "AWS::CodePipeline::CustomActionType"
    AWS__CodePipeline__Pipeline = "AWS::CodePipeline::Pipeline"
    AWS__CodePipeline__Webhook = "AWS::CodePipeline::Webhook"
    AWS__CodeStar__GitHubRepository = "AWS::CodeStar::GitHubRepository"
    AWS__CodeStarConnections__Connection = "AWS::CodeStarConnections::Connection"
    AWS__CodeStarNotifications__NotificationRule = "AWS::CodeStarNotifications::NotificationRule"
    AWS__Cognito__IdentityPool = "AWS::Cognito::IdentityPool"
    AWS__Cognito__IdentityPoolRoleAttachment = "AWS::Cognito::IdentityPoolRoleAttachment"
    AWS__Cognito__UserPool = "AWS::Cognito::UserPool"
    AWS__Cognito__UserPoolClient = "AWS::Cognito::UserPoolClient"
    AWS__Cognito__UserPoolDomain = "AWS::Cognito::UserPoolDomain"
    AWS__Cognito__UserPoolGroup = "AWS::Cognito::UserPoolGroup"
    AWS__Cognito__UserPoolIdentityProvider = "AWS::Cognito::UserPoolIdentityProvider"
    AWS__Cognito__UserPoolResourceServer = "AWS::Cognito::UserPoolResourceServer"
    AWS__Cognito__UserPoolRiskConfigurationAttachment = "AWS::Cognito::UserPoolRiskConfigurationAttachment"
    AWS__Cognito__UserPoolUICustomizationAttachment = "AWS::Cognito::UserPoolUICustomizationAttachment"
    AWS__Cognito__UserPoolUser = "AWS::Cognito::UserPoolUser"
    AWS__Cognito__UserPoolUserToGroupAttachment = "AWS::Cognito::UserPoolUserToGroupAttachment"
    AWS__Config__AggregationAuthorization = "AWS::Config::AggregationAuthorization"
    AWS__Config__ConfigRule = "AWS::Config::ConfigRule"
    AWS__Config__ConfigurationAggregator = "AWS::Config::ConfigurationAggregator"
    AWS__Config__ConfigurationRecorder = "AWS::Config::ConfigurationRecorder"
    AWS__Config__ConformancePack = "AWS::Config::ConformancePack"
    AWS__Config__DeliveryChannel = "AWS::Config::DeliveryChannel"
    AWS__Config__OrganizationConfigRule = "AWS::Config::OrganizationConfigRule"
    AWS__Config__OrganizationConformancePack = "AWS::Config::OrganizationConformancePack"
    AWS__Config__RemediationConfiguration = "AWS::Config::RemediationConfiguration"
    AWS__Config__StoredQuery = "AWS::Config::StoredQuery"
    AWS__DAX__Cluster = "AWS::DAX::Cluster"
    AWS__DAX__ParameterGroup = "AWS::DAX::ParameterGroup"
    AWS__DAX__SubnetGroup = "AWS::DAX::SubnetGroup"
    AWS__DLM__LifecyclePolicy = "AWS::DLM::LifecyclePolicy"
    AWS__DMS__Certificate = "AWS::DMS::Certificate"
    AWS__DMS__Endpoint = "AWS::DMS::Endpoint"
    AWS__DMS__EventSubscription = "AWS::DMS::EventSubscription"
    AWS__DMS__ReplicationInstance = "AWS::DMS::ReplicationInstance"
    AWS__DMS__ReplicationSubnetGroup = "AWS::DMS::ReplicationSubnetGroup"
    AWS__DMS__ReplicationTask = "AWS::DMS::ReplicationTask"
    AWS__DataBrew__Dataset = "AWS::DataBrew::Dataset"
    AWS__DataBrew__Job = "AWS::DataBrew::Job"
    AWS__DataBrew__Project = "AWS::DataBrew::Project"
    AWS__DataBrew__Recipe = "AWS::DataBrew::Recipe"
    AWS__DataBrew__Ruleset = "AWS::DataBrew::Ruleset"
    AWS__DataBrew__Schedule = "AWS::DataBrew::Schedule"
    AWS__DataPipeline__Pipeline = "AWS::DataPipeline::Pipeline"
    AWS__DataSync__Agent = "AWS::DataSync::Agent"
    AWS__DataSync__LocationEFS = "AWS::DataSync::LocationEFS"
    AWS__DataSync__LocationFSxLustre = "AWS::DataSync::LocationFSxLustre"
    AWS__DataSync__LocationFSxONTAP = "AWS::DataSync::LocationFSxONTAP"
    AWS__DataSync__LocationFSxOpenZFS = "AWS::DataSync::LocationFSxOpenZFS"
    AWS__DataSync__LocationFSxWindows = "AWS::DataSync::LocationFSxWindows"
    AWS__DataSync__LocationHDFS = "AWS::DataSync::LocationHDFS"
    AWS__DataSync__LocationNFS = "AWS::DataSync::LocationNFS"
    AWS__DataSync__LocationObjectStorage = "AWS::DataSync::LocationObjectStorage"
    AWS__DataSync__LocationS3 = "AWS::DataSync::LocationS3"
    AWS__DataSync__LocationSMB = "AWS::DataSync::LocationSMB"
    AWS__DataSync__Task = "AWS::DataSync::Task"
    AWS__Detective__Graph = "AWS::Detective::Graph"
    AWS__Detective__MemberInvitation = "AWS::Detective::MemberInvitation"
    AWS__DevOpsGuru__NotificationChannel = "AWS::DevOpsGuru::NotificationChannel"
    AWS__DevOpsGuru__ResourceCollection = "AWS::DevOpsGuru::ResourceCollection"
    AWS__DirectoryService__MicrosoftAD = "AWS::DirectoryService::MicrosoftAD"
    AWS__DirectoryService__SimpleAD = "AWS::DirectoryService::SimpleAD"
    AWS__DocDB__DBCluster = "AWS::DocDB::DBCluster"
    AWS__DocDB__DBClusterParameterGroup = "AWS::DocDB::DBClusterParameterGroup"
    AWS__DocDB__DBInstance = "AWS::DocDB::DBInstance"
    AWS__DocDB__DBSubnetGroup = "AWS::DocDB::DBSubnetGroup"
    AWS__DynamoDB__GlobalTable = "AWS::DynamoDB::GlobalTable"
    AWS__DynamoDB__Table = "AWS::DynamoDB::Table"
    AWS__EC2__CapacityReservation = "AWS::EC2::CapacityReservation"
    AWS__EC2__CapacityReservationFleet = "AWS::EC2::CapacityReservationFleet"
    AWS__EC2__CarrierGateway = "AWS::EC2::CarrierGateway"
    AWS__EC2__ClientVpnAuthorizationRule = "AWS::EC2::ClientVpnAuthorizationRule"
    AWS__EC2__ClientVpnEndpoint = "AWS::EC2::ClientVpnEndpoint"
    AWS__EC2__ClientVpnRoute = "AWS::EC2::ClientVpnRoute"
    AWS__EC2__ClientVpnTargetNetworkAssociation = "AWS::EC2::ClientVpnTargetNetworkAssociation"
    AWS__EC2__CustomerGateway = "AWS::EC2::CustomerGateway"
    AWS__EC2__DHCPOptions = "AWS::EC2::DHCPOptions"
    AWS__EC2__EC2Fleet = "AWS::EC2::EC2Fleet"
    AWS__EC2__EIP = "AWS::EC2::EIP"
    AWS__EC2__EIPAssociation = "AWS::EC2::EIPAssociation"
    AWS__EC2__EgressOnlyInternetGateway = "AWS::EC2::EgressOnlyInternetGateway"
    AWS__EC2__EnclaveCertificateIamRoleAssociation = "AWS::EC2::EnclaveCertificateIamRoleAssociation"
    AWS__EC2__FlowLog = "AWS::EC2::FlowLog"
    AWS__EC2__GatewayRouteTableAssociation = "AWS::EC2::GatewayRouteTableAssociation"
    AWS__EC2__Host = "AWS::EC2::Host"
    AWS__EC2__IPAM = "AWS::EC2::IPAM"
    AWS__EC2__IPAMAllocation = "AWS::EC2::IPAMAllocation"
    AWS__EC2__IPAMPool = "AWS::EC2::IPAMPool"
    AWS__EC2__IPAMScope = "AWS::EC2::IPAMScope"
    AWS__EC2__Instance = "AWS::EC2::Instance"
    AWS__EC2__InternetGateway = "AWS::EC2::InternetGateway"
    AWS__EC2__KeyPair = "AWS::EC2::KeyPair"
    AWS__EC2__LaunchTemplate = "AWS::EC2::LaunchTemplate"
    AWS__EC2__LocalGatewayRoute = "AWS::EC2::LocalGatewayRoute"
    AWS__EC2__LocalGatewayRouteTableVPCAssociation = "AWS::EC2::LocalGatewayRouteTableVPCAssociation"
    AWS__EC2__NatGateway = "AWS::EC2::NatGateway"
    AWS__EC2__NetworkAcl = "AWS::EC2::NetworkAcl"
    AWS__EC2__NetworkAclEntry = "AWS::EC2::NetworkAclEntry"
    AWS__EC2__NetworkInsightsAccessScope = "AWS::EC2::NetworkInsightsAccessScope"
    AWS__EC2__NetworkInsightsAccessScopeAnalysis = "AWS::EC2::NetworkInsightsAccessScopeAnalysis"
    AWS__EC2__NetworkInsightsAnalysis = "AWS::EC2::NetworkInsightsAnalysis"
    AWS__EC2__NetworkInsightsPath = "AWS::EC2::NetworkInsightsPath"
    AWS__EC2__NetworkInterface = "AWS::EC2::NetworkInterface"
    AWS__EC2__NetworkInterfaceAttachment = "AWS::EC2::NetworkInterfaceAttachment"
    AWS__EC2__NetworkInterfacePermission = "AWS::EC2::NetworkInterfacePermission"
    AWS__EC2__PlacementGroup = "AWS::EC2::PlacementGroup"
    AWS__EC2__PrefixList = "AWS::EC2::PrefixList"
    AWS__EC2__Route = "AWS::EC2::Route"
    AWS__EC2__RouteTable = "AWS::EC2::RouteTable"
    AWS__EC2__SecurityGroup = "AWS::EC2::SecurityGroup"
    AWS__EC2__SecurityGroupEgress = "AWS::EC2::SecurityGroupEgress"
    AWS__EC2__SecurityGroupIngress = "AWS::EC2::SecurityGroupIngress"
    AWS__EC2__SpotFleet = "AWS::EC2::SpotFleet"
    AWS__EC2__Subnet = "AWS::EC2::Subnet"
    AWS__EC2__SubnetCidrBlock = "AWS::EC2::SubnetCidrBlock"
    AWS__EC2__SubnetNetworkAclAssociation = "AWS::EC2::SubnetNetworkAclAssociation"
    AWS__EC2__SubnetRouteTableAssociation = "AWS::EC2::SubnetRouteTableAssociation"
    AWS__EC2__TrafficMirrorFilter = "AWS::EC2::TrafficMirrorFilter"
    AWS__EC2__TrafficMirrorFilterRule = "AWS::EC2::TrafficMirrorFilterRule"
    AWS__EC2__TrafficMirrorSession = "AWS::EC2::TrafficMirrorSession"
    AWS__EC2__TrafficMirrorTarget = "AWS::EC2::TrafficMirrorTarget"
    AWS__EC2__TransitGateway = "AWS::EC2::TransitGateway"
    AWS__EC2__TransitGatewayAttachment = "AWS::EC2::TransitGatewayAttachment"
    AWS__EC2__TransitGatewayConnect = "AWS::EC2::TransitGatewayConnect"
    AWS__EC2__TransitGatewayMulticastDomain = "AWS::EC2::TransitGatewayMulticastDomain"
    AWS__EC2__TransitGatewayMulticastDomainAssociation = "AWS::EC2::TransitGatewayMulticastDomainAssociation"
    AWS__EC2__TransitGatewayMulticastGroupMember = "AWS::EC2::TransitGatewayMulticastGroupMember"
    AWS__EC2__TransitGatewayMulticastGroupSource = "AWS::EC2::TransitGatewayMulticastGroupSource"
    AWS__EC2__TransitGatewayPeeringAttachment = "AWS::EC2::TransitGatewayPeeringAttachment"
    AWS__EC2__TransitGatewayRoute = "AWS::EC2::TransitGatewayRoute"
    AWS__EC2__TransitGatewayRouteTable = "AWS::EC2::TransitGatewayRouteTable"
    AWS__EC2__TransitGatewayRouteTableAssociation = "AWS::EC2::TransitGatewayRouteTableAssociation"
    AWS__EC2__TransitGatewayRouteTablePropagation = "AWS::EC2::TransitGatewayRouteTablePropagation"
    AWS__EC2__TransitGatewayVpcAttachment = "AWS::EC2::TransitGatewayVpcAttachment"
    AWS__EC2__VPC = "AWS::EC2::VPC"
    AWS__EC2__VPCCidrBlock = "AWS::EC2::VPCCidrBlock"
    AWS__EC2__VPCDHCPOptionsAssociation = "AWS::EC2::VPCDHCPOptionsAssociation"
    AWS__EC2__VPCEndpoint = "AWS::EC2::VPCEndpoint"
    AWS__EC2__VPCEndpointConnectionNotification = "AWS::EC2::VPCEndpointConnectionNotification"
    AWS__EC2__VPCEndpointService = "AWS::EC2::VPCEndpointService"
    AWS__EC2__VPCEndpointServicePermissions = "AWS::EC2::VPCEndpointServicePermissions"
    AWS__EC2__VPCGatewayAttachment = "AWS::EC2::VPCGatewayAttachment"
    AWS__EC2__VPCPeeringConnection = "AWS::EC2::VPCPeeringConnection"
    AWS__EC2__VPNConnection = "AWS::EC2::VPNConnection"
    AWS__EC2__VPNConnectionRoute = "AWS::EC2::VPNConnectionRoute"
    AWS__EC2__VPNGateway = "AWS::EC2::VPNGateway"
    AWS__EC2__VPNGatewayRoutePropagation = "AWS::EC2::VPNGatewayRoutePropagation"
    AWS__EC2__Volume = "AWS::EC2::Volume"
    AWS__EC2__VolumeAttachment = "AWS::EC2::VolumeAttachment"
    AWS__ECR__PullThroughCacheRule = "AWS::ECR::PullThroughCacheRule"
    AWS__ECR__RegistryPolicy = "AWS::ECR::RegistryPolicy"
    AWS__ECR__ReplicationConfiguration = "AWS::ECR::ReplicationConfiguration"
    AWS__ECR__Repository = "AWS::ECR::Repository"
    AWS__ECS__CapacityProvider = "AWS::ECS::CapacityProvider"
    AWS__ECS__Cluster = "AWS::ECS::Cluster"
    AWS__ECS__ClusterCapacityProviderAssociations = "AWS::ECS::ClusterCapacityProviderAssociations"
    AWS__ECS__PrimaryTaskSet = "AWS::ECS::PrimaryTaskSet"
    AWS__ECS__Service = "AWS::ECS::Service"
    AWS__ECS__TaskDefinition = "AWS::ECS::TaskDefinition"
    AWS__ECS__TaskSet = "AWS::ECS::TaskSet"
    AWS__EFS__AccessPoint = "AWS::EFS::AccessPoint"
    AWS__EFS__FileSystem = "AWS::EFS::FileSystem"
    AWS__EFS__MountTarget = "AWS::EFS::MountTarget"
    AWS__EKS__Addon = "AWS::EKS::Addon"
    AWS__EKS__Cluster = "AWS::EKS::Cluster"
    AWS__EKS__FargateProfile = "AWS::EKS::FargateProfile"
    AWS__EKS__IdentityProviderConfig = "AWS::EKS::IdentityProviderConfig"
    AWS__EKS__Nodegroup = "AWS::EKS::Nodegroup"
    AWS__EMR__Cluster = "AWS::EMR::Cluster"
    AWS__EMR__InstanceFleetConfig = "AWS::EMR::InstanceFleetConfig"
    AWS__EMR__InstanceGroupConfig = "AWS::EMR::InstanceGroupConfig"
    AWS__EMR__SecurityConfiguration = "AWS::EMR::SecurityConfiguration"
    AWS__EMR__Step = "AWS::EMR::Step"
    AWS__EMR__Studio = "AWS::EMR::Studio"
    AWS__EMR__StudioSessionMapping = "AWS::EMR::StudioSessionMapping"
    AWS__EMRContainers__VirtualCluster = "AWS::EMRContainers::VirtualCluster"
    AWS__ElastiCache__CacheCluster = "AWS::ElastiCache::CacheCluster"
    AWS__ElastiCache__GlobalReplicationGroup = "AWS::ElastiCache::GlobalReplicationGroup"
    AWS__ElastiCache__ParameterGroup = "AWS::ElastiCache::ParameterGroup"
    AWS__ElastiCache__ReplicationGroup = "AWS::ElastiCache::ReplicationGroup"
    AWS__ElastiCache__SecurityGroup = "AWS::ElastiCache::SecurityGroup"
    AWS__ElastiCache__SecurityGroupIngress = "AWS::ElastiCache::SecurityGroupIngress"
    AWS__ElastiCache__SubnetGroup = "AWS::ElastiCache::SubnetGroup"
    AWS__ElastiCache__User = "AWS::ElastiCache::User"
    AWS__ElastiCache__UserGroup = "AWS::ElastiCache::UserGroup"
    AWS__ElasticBeanstalk__Application = "AWS::ElasticBeanstalk::Application"
    AWS__ElasticBeanstalk__ApplicationVersion = "AWS::ElasticBeanstalk::ApplicationVersion"
    AWS__ElasticBeanstalk__ConfigurationTemplate = "AWS::ElasticBeanstalk::ConfigurationTemplate"
    AWS__ElasticBeanstalk__Environment = "AWS::ElasticBeanstalk::Environment"
    AWS__ElasticLoadBalancing__LoadBalancer = "AWS::ElasticLoadBalancing::LoadBalancer"
    AWS__ElasticLoadBalancingV2__Listener = "AWS::ElasticLoadBalancingV2::Listener"
    AWS__ElasticLoadBalancingV2__ListenerCertificate = "AWS::ElasticLoadBalancingV2::ListenerCertificate"
    AWS__ElasticLoadBalancingV2__ListenerRule = "AWS::ElasticLoadBalancingV2::ListenerRule"
    AWS__ElasticLoadBalancingV2__LoadBalancer = "AWS::ElasticLoadBalancingV2::LoadBalancer"
    AWS__ElasticLoadBalancingV2__TargetGroup = "AWS::ElasticLoadBalancingV2::TargetGroup"
    AWS__Elasticsearch__Domain = "AWS::Elasticsearch::Domain"
    AWS__EventSchemas__Discoverer = "AWS::EventSchemas::Discoverer"
    AWS__EventSchemas__Registry = "AWS::EventSchemas::Registry"
    AWS__EventSchemas__RegistryPolicy = "AWS::EventSchemas::RegistryPolicy"
    AWS__EventSchemas__Schema = "AWS::EventSchemas::Schema"
    AWS__Events__ApiDestination = "AWS::Events::ApiDestination"
    AWS__Events__Archive = "AWS::Events::Archive"
    AWS__Events__Connection = "AWS::Events::Connection"
    AWS__Events__Endpoint = "AWS::Events::Endpoint"
    AWS__Events__EventBus = "AWS::Events::EventBus"
    AWS__Events__EventBusPolicy = "AWS::Events::EventBusPolicy"
    AWS__Events__Rule = "AWS::Events::Rule"
    AWS__Evidently__Experiment = "AWS::Evidently::Experiment"
    AWS__Evidently__Feature = "AWS::Evidently::Feature"
    AWS__Evidently__Launch = "AWS::Evidently::Launch"
    AWS__Evidently__Project = "AWS::Evidently::Project"
    AWS__Evidently__Segment = "AWS::Evidently::Segment"
    AWS__FIS__ExperimentTemplate = "AWS::FIS::ExperimentTemplate"
    AWS__FMS__NotificationChannel = "AWS::FMS::NotificationChannel"
    AWS__FMS__Policy = "AWS::FMS::Policy"
    AWS__FSx__FileSystem = "AWS::FSx::FileSystem"
    AWS__FSx__Snapshot = "AWS::FSx::Snapshot"
    AWS__FSx__StorageVirtualMachine = "AWS::FSx::StorageVirtualMachine"
    AWS__FSx__Volume = "AWS::FSx::Volume"
    AWS__FinSpace__Environment = "AWS::FinSpace::Environment"
    AWS__Forecast__Dataset = "AWS::Forecast::Dataset"
    AWS__Forecast__DatasetGroup = "AWS::Forecast::DatasetGroup"
    AWS__FraudDetector__Detector = "AWS::FraudDetector::Detector"
    AWS__FraudDetector__EntityType = "AWS::FraudDetector::EntityType"
    AWS__FraudDetector__EventType = "AWS::FraudDetector::EventType"
    AWS__FraudDetector__Label = "AWS::FraudDetector::Label"
    AWS__FraudDetector__Outcome = "AWS::FraudDetector::Outcome"
    AWS__FraudDetector__Variable = "AWS::FraudDetector::Variable"
    AWS__GameLift__Alias = "AWS::GameLift::Alias"
    AWS__GameLift__Build = "AWS::GameLift::Build"
    AWS__GameLift__Fleet = "AWS::GameLift::Fleet"
    AWS__GameLift__GameServerGroup = "AWS::GameLift::GameServerGroup"
    AWS__GameLift__GameSessionQueue = "AWS::GameLift::GameSessionQueue"
    AWS__GameLift__MatchmakingConfiguration = "AWS::GameLift::MatchmakingConfiguration"
    AWS__GameLift__MatchmakingRuleSet = "AWS::GameLift::MatchmakingRuleSet"
    AWS__GameLift__Script = "AWS::GameLift::Script"
    AWS__GlobalAccelerator__Accelerator = "AWS::GlobalAccelerator::Accelerator"
    AWS__GlobalAccelerator__EndpointGroup = "AWS::GlobalAccelerator::EndpointGroup"
    AWS__GlobalAccelerator__Listener = "AWS::GlobalAccelerator::Listener"
    AWS__Glue__Classifier = "AWS::Glue::Classifier"
    AWS__Glue__Connection = "AWS::Glue::Connection"
    AWS__Glue__Crawler = "AWS::Glue::Crawler"
    AWS__Glue__DataCatalogEncryptionSettings = "AWS::Glue::DataCatalogEncryptionSettings"
    AWS__Glue__Database = "AWS::Glue::Database"
    AWS__Glue__DevEndpoint = "AWS::Glue::DevEndpoint"
    AWS__Glue__Job = "AWS::Glue::Job"
    AWS__Glue__MLTransform = "AWS::Glue::MLTransform"
    AWS__Glue__Partition = "AWS::Glue::Partition"
    AWS__Glue__Registry = "AWS::Glue::Registry"
    AWS__Glue__Schema = "AWS::Glue::Schema"
    AWS__Glue__SchemaVersion = "AWS::Glue::SchemaVersion"
    AWS__Glue__SchemaVersionMetadata = "AWS::Glue::SchemaVersionMetadata"
    AWS__Glue__SecurityConfiguration = "AWS::Glue::SecurityConfiguration"
    AWS__Glue__Table = "AWS::Glue::Table"
    AWS__Glue__Trigger = "AWS::Glue::Trigger"
    AWS__Glue__Workflow = "AWS::Glue::Workflow"
    AWS__Greengrass__ConnectorDefinition = "AWS::Greengrass::ConnectorDefinition"
    AWS__Greengrass__ConnectorDefinitionVersion = "AWS::Greengrass::ConnectorDefinitionVersion"
    AWS__Greengrass__CoreDefinition = "AWS::Greengrass::CoreDefinition"
    AWS__Greengrass__CoreDefinitionVersion = "AWS::Greengrass::CoreDefinitionVersion"
    AWS__Greengrass__DeviceDefinition = "AWS::Greengrass::DeviceDefinition"
    AWS__Greengrass__DeviceDefinitionVersion = "AWS::Greengrass::DeviceDefinitionVersion"
    AWS__Greengrass__FunctionDefinition = "AWS::Greengrass::FunctionDefinition"
    AWS__Greengrass__FunctionDefinitionVersion = "AWS::Greengrass::FunctionDefinitionVersion"
    AWS__Greengrass__Group = "AWS::Greengrass::Group"
    AWS__Greengrass__GroupVersion = "AWS::Greengrass::GroupVersion"
    AWS__Greengrass__LoggerDefinition = "AWS::Greengrass::LoggerDefinition"
    AWS__Greengrass__LoggerDefinitionVersion = "AWS::Greengrass::LoggerDefinitionVersion"
    AWS__Greengrass__ResourceDefinition = "AWS::Greengrass::ResourceDefinition"
    AWS__Greengrass__ResourceDefinitionVersion = "AWS::Greengrass::ResourceDefinitionVersion"
    AWS__Greengrass__SubscriptionDefinition = "AWS::Greengrass::SubscriptionDefinition"
    AWS__Greengrass__SubscriptionDefinitionVersion = "AWS::Greengrass::SubscriptionDefinitionVersion"
    AWS__GreengrassV2__ComponentVersion = "AWS::GreengrassV2::ComponentVersion"
    AWS__GroundStation__Config = "AWS::GroundStation::Config"
    AWS__GroundStation__DataflowEndpointGroup = "AWS::GroundStation::DataflowEndpointGroup"
    AWS__GroundStation__MissionProfile = "AWS::GroundStation::MissionProfile"
    AWS__GuardDuty__Detector = "AWS::GuardDuty::Detector"
    AWS__GuardDuty__Filter = "AWS::GuardDuty::Filter"
    AWS__GuardDuty__IPSet = "AWS::GuardDuty::IPSet"
    AWS__GuardDuty__Master = "AWS::GuardDuty::Master"
    AWS__GuardDuty__Member = "AWS::GuardDuty::Member"
    AWS__GuardDuty__ThreatIntelSet = "AWS::GuardDuty::ThreatIntelSet"
    AWS__HealthLake__FHIRDatastore = "AWS::HealthLake::FHIRDatastore"
    AWS__IAM__AccessKey = "AWS::IAM::AccessKey"
    AWS__IAM__Group = "AWS::IAM::Group"
    AWS__IAM__InstanceProfile = "AWS::IAM::InstanceProfile"
    AWS__IAM__ManagedPolicy = "AWS::IAM::ManagedPolicy"
    AWS__IAM__OIDCProvider = "AWS::IAM::OIDCProvider"
    AWS__IAM__Policy = "AWS::IAM::Policy"
    AWS__IAM__Role = "AWS::IAM::Role"
    AWS__IAM__SAMLProvider = "AWS::IAM::SAMLProvider"
    AWS__IAM__ServerCertificate = "AWS::IAM::ServerCertificate"
    AWS__IAM__ServiceLinkedRole = "AWS::IAM::ServiceLinkedRole"
    AWS__IAM__User = "AWS::IAM::User"
    AWS__IAM__UserToGroupAddition = "AWS::IAM::UserToGroupAddition"
    AWS__IAM__VirtualMFADevice = "AWS::IAM::VirtualMFADevice"
    AWS__ImageBuilder__Component = "AWS::ImageBuilder::Component"
    AWS__ImageBuilder__ContainerRecipe = "AWS::ImageBuilder::ContainerRecipe"
    AWS__ImageBuilder__DistributionConfiguration = "AWS::ImageBuilder::DistributionConfiguration"
    AWS__ImageBuilder__Image = "AWS::ImageBuilder::Image"
    AWS__ImageBuilder__ImagePipeline = "AWS::ImageBuilder::ImagePipeline"
    AWS__ImageBuilder__ImageRecipe = "AWS::ImageBuilder::ImageRecipe"
    AWS__ImageBuilder__InfrastructureConfiguration = "AWS::ImageBuilder::InfrastructureConfiguration"
    AWS__Inspector__AssessmentTarget = "AWS::Inspector::AssessmentTarget"
    AWS__Inspector__AssessmentTemplate = "AWS::Inspector::AssessmentTemplate"
    AWS__Inspector__ResourceGroup = "AWS::Inspector::ResourceGroup"
    AWS__InspectorV2__Filter = "AWS::InspectorV2::Filter"
    AWS__IoT1Click__Device = "AWS::IoT1Click::Device"
    AWS__IoT1Click__Placement = "AWS::IoT1Click::Placement"
    AWS__IoT1Click__Project = "AWS::IoT1Click::Project"
    AWS__IoT__AccountAuditConfiguration = "AWS::IoT::AccountAuditConfiguration"
    AWS__IoT__Authorizer = "AWS::IoT::Authorizer"
    AWS__IoT__CACertificate = "AWS::IoT::CACertificate"
    AWS__IoT__Certificate = "AWS::IoT::Certificate"
    AWS__IoT__CustomMetric = "AWS::IoT::CustomMetric"
    AWS__IoT__Dimension = "AWS::IoT::Dimension"
    AWS__IoT__DomainConfiguration = "AWS::IoT::DomainConfiguration"
    AWS__IoT__FleetMetric = "AWS::IoT::FleetMetric"
    AWS__IoT__JobTemplate = "AWS::IoT::JobTemplate"
    AWS__IoT__Logging = "AWS::IoT::Logging"
    AWS__IoT__MitigationAction = "AWS::IoT::MitigationAction"
    AWS__IoT__Policy = "AWS::IoT::Policy"
    AWS__IoT__PolicyPrincipalAttachment = "AWS::IoT::PolicyPrincipalAttachment"
    AWS__IoT__ProvisioningTemplate = "AWS::IoT::ProvisioningTemplate"
    AWS__IoT__ResourceSpecificLogging = "AWS::IoT::ResourceSpecificLogging"
    AWS__IoT__RoleAlias = "AWS::IoT::RoleAlias"
    AWS__IoT__ScheduledAudit = "AWS::IoT::ScheduledAudit"
    AWS__IoT__SecurityProfile = "AWS::IoT::SecurityProfile"
    AWS__IoT__Thing = "AWS::IoT::Thing"
    AWS__IoT__ThingPrincipalAttachment = "AWS::IoT::ThingPrincipalAttachment"
    AWS__IoT__TopicRule = "AWS::IoT::TopicRule"
    AWS__IoT__TopicRuleDestination = "AWS::IoT::TopicRuleDestination"
    AWS__IoTAnalytics__Channel = "AWS::IoTAnalytics::Channel"
    AWS__IoTAnalytics__Dataset = "AWS::IoTAnalytics::Dataset"
    AWS__IoTAnalytics__Datastore = "AWS::IoTAnalytics::Datastore"
    AWS__IoTAnalytics__Pipeline = "AWS::IoTAnalytics::Pipeline"
    AWS__IoTEvents__AlarmModel = "AWS::IoTEvents::AlarmModel"
    AWS__IoTEvents__DetectorModel = "AWS::IoTEvents::DetectorModel"
    AWS__IoTEvents__Input = "AWS::IoTEvents::Input"
    AWS__IoTFleetHub__Application = "AWS::IoTFleetHub::Application"
    AWS__IoTSiteWise__AccessPolicy = "AWS::IoTSiteWise::AccessPolicy"
    AWS__IoTSiteWise__Asset = "AWS::IoTSiteWise::Asset"
    AWS__IoTSiteWise__AssetModel = "AWS::IoTSiteWise::AssetModel"
    AWS__IoTSiteWise__Dashboard = "AWS::IoTSiteWise::Dashboard"
    AWS__IoTSiteWise__Gateway = "AWS::IoTSiteWise::Gateway"
    AWS__IoTSiteWise__Portal = "AWS::IoTSiteWise::Portal"
    AWS__IoTSiteWise__Project = "AWS::IoTSiteWise::Project"
    AWS__KMS__Alias = "AWS::KMS::Alias"
    AWS__KMS__Key = "AWS::KMS::Key"
    AWS__KMS__ReplicaKey = "AWS::KMS::ReplicaKey"
    AWS__KafkaConnect__Connector = "AWS::KafkaConnect::Connector"
    AWS__Kendra__DataSource = "AWS::Kendra::DataSource"
    AWS__Kendra__Faq = "AWS::Kendra::Faq"
    AWS__Kendra__Index = "AWS::Kendra::Index"
    AWS__Kinesis__Stream = "AWS::Kinesis::Stream"
    AWS__Kinesis__StreamConsumer = "AWS::Kinesis::StreamConsumer"
    AWS__KinesisAnalytics__Application = "AWS::KinesisAnalytics::Application"
    AWS__KinesisAnalytics__ApplicationOutput = "AWS::KinesisAnalytics::ApplicationOutput"
    AWS__KinesisAnalytics__ApplicationReferenceDataSource = "AWS::KinesisAnalytics::ApplicationReferenceDataSource"
    AWS__KinesisAnalyticsV2__Application = "AWS::KinesisAnalyticsV2::Application"
    AWS__KinesisAnalyticsV2__ApplicationCloudWatchLoggingOption = (
        "AWS::KinesisAnalyticsV2::ApplicationCloudWatchLoggingOption"
    )
    AWS__KinesisAnalyticsV2__ApplicationOutput = "AWS::KinesisAnalyticsV2::ApplicationOutput"
    AWS__KinesisAnalyticsV2__ApplicationReferenceDataSource = "AWS::KinesisAnalyticsV2::ApplicationReferenceDataSource"
    AWS__KinesisFirehose__DeliveryStream = "AWS::KinesisFirehose::DeliveryStream"
    AWS__KinesisVideo__SignalingChannel = "AWS::KinesisVideo::SignalingChannel"
    AWS__KinesisVideo__Stream = "AWS::KinesisVideo::Stream"
    AWS__LakeFormation__DataCellsFilter = "AWS::LakeFormation::DataCellsFilter"
    AWS__LakeFormation__DataLakeSettings = "AWS::LakeFormation::DataLakeSettings"
    AWS__LakeFormation__Permissions = "AWS::LakeFormation::Permissions"
    AWS__LakeFormation__PrincipalPermissions = "AWS::LakeFormation::PrincipalPermissions"
    AWS__LakeFormation__Resource = "AWS::LakeFormation::Resource"
    AWS__LakeFormation__Tag = "AWS::LakeFormation::Tag"
    AWS__LakeFormation__TagAssociation = "AWS::LakeFormation::TagAssociation"
    AWS__Lambda__Alias = "AWS::Lambda::Alias"
    AWS__Lambda__CodeSigningConfig = "AWS::Lambda::CodeSigningConfig"
    AWS__Lambda__EventInvokeConfig = "AWS::Lambda::EventInvokeConfig"
    AWS__Lambda__EventSourceMapping = "AWS::Lambda::EventSourceMapping"
    AWS__Lambda__Function = "AWS::Lambda::Function"
    AWS__Lambda__LayerVersion = "AWS::Lambda::LayerVersion"
    AWS__Lambda__LayerVersionPermission = "AWS::Lambda::LayerVersionPermission"
    AWS__Lambda__Permission = "AWS::Lambda::Permission"
    AWS__Lambda__Url = "AWS::Lambda::Url"
    AWS__Lambda__Version = "AWS::Lambda::Version"
    AWS__LicenseManager__Grant = "AWS::LicenseManager::Grant"
    AWS__LicenseManager__License = "AWS::LicenseManager::License"
    AWS__Lightsail__Alarm = "AWS::Lightsail::Alarm"
    AWS__Lightsail__Bucket = "AWS::Lightsail::Bucket"
    AWS__Lightsail__Certificate = "AWS::Lightsail::Certificate"
    AWS__Lightsail__Container = "AWS::Lightsail::Container"
    AWS__Lightsail__Database = "AWS::Lightsail::Database"
    AWS__Lightsail__Disk = "AWS::Lightsail::Disk"
    AWS__Lightsail__Instance = "AWS::Lightsail::Instance"
    AWS__Lightsail__LoadBalancer = "AWS::Lightsail::LoadBalancer"
    AWS__Lightsail__LoadBalancerTlsCertificate = "AWS::Lightsail::LoadBalancerTlsCertificate"
    AWS__Lightsail__StaticIp = "AWS::Lightsail::StaticIp"
    AWS__Location__GeofenceCollection = "AWS::Location::GeofenceCollection"
    AWS__Location__Map = "AWS::Location::Map"
    AWS__Location__PlaceIndex = "AWS::Location::PlaceIndex"
    AWS__Location__RouteCalculator = "AWS::Location::RouteCalculator"
    AWS__Location__Tracker = "AWS::Location::Tracker"
    AWS__Location__TrackerConsumer = "AWS::Location::TrackerConsumer"
    AWS__Logs__Destination = "AWS::Logs::Destination"
    AWS__Logs__LogGroup = "AWS::Logs::LogGroup"
    AWS__Logs__LogStream = "AWS::Logs::LogStream"
    AWS__Logs__MetricFilter = "AWS::Logs::MetricFilter"
    AWS__Logs__QueryDefinition = "AWS::Logs::QueryDefinition"
    AWS__Logs__ResourcePolicy = "AWS::Logs::ResourcePolicy"
    AWS__Logs__SubscriptionFilter = "AWS::Logs::SubscriptionFilter"
    AWS__LookoutMetrics__Alert = "AWS::LookoutMetrics::Alert"
    AWS__LookoutMetrics__AnomalyDetector = "AWS::LookoutMetrics::AnomalyDetector"
    AWS__LookoutVision__Project = "AWS::LookoutVision::Project"
    AWS__MSK__BatchScramSecret = "AWS::MSK::BatchScramSecret"
    AWS__MSK__Cluster = "AWS::MSK::Cluster"
    AWS__MSK__Configuration = "AWS::MSK::Configuration"
    AWS__MSK__ServerlessCluster = "AWS::MSK::ServerlessCluster"
    AWS__MWAA__Environment = "AWS::MWAA::Environment"
    AWS__Macie__CustomDataIdentifier = "AWS::Macie::CustomDataIdentifier"
    AWS__Macie__FindingsFilter = "AWS::Macie::FindingsFilter"
    AWS__Macie__Session = "AWS::Macie::Session"
    AWS__ManagedBlockchain__Member = "AWS::ManagedBlockchain::Member"
    AWS__ManagedBlockchain__Node = "AWS::ManagedBlockchain::Node"
    AWS__MediaConnect__Flow = "AWS::MediaConnect::Flow"
    AWS__MediaConnect__FlowEntitlement = "AWS::MediaConnect::FlowEntitlement"
    AWS__MediaConnect__FlowOutput = "AWS::MediaConnect::FlowOutput"
    AWS__MediaConnect__FlowSource = "AWS::MediaConnect::FlowSource"
    AWS__MediaConnect__FlowVpcInterface = "AWS::MediaConnect::FlowVpcInterface"
    AWS__MediaConvert__JobTemplate = "AWS::MediaConvert::JobTemplate"
    AWS__MediaConvert__Preset = "AWS::MediaConvert::Preset"
    AWS__MediaConvert__Queue = "AWS::MediaConvert::Queue"
    AWS__MediaLive__Channel = "AWS::MediaLive::Channel"
    AWS__MediaLive__InputSecurityGroup = "AWS::MediaLive::InputSecurityGroup"
    AWS__MediaPackage__Asset = "AWS::MediaPackage::Asset"
    AWS__MediaPackage__Channel = "AWS::MediaPackage::Channel"
    AWS__MediaPackage__OriginEndpoint = "AWS::MediaPackage::OriginEndpoint"
    AWS__MediaPackage__PackagingConfiguration = "AWS::MediaPackage::PackagingConfiguration"
    AWS__MediaPackage__PackagingGroup = "AWS::MediaPackage::PackagingGroup"
    AWS__MemoryDB__ACL = "AWS::MemoryDB::ACL"
    AWS__MemoryDB__Cluster = "AWS::MemoryDB::Cluster"
    AWS__MemoryDB__ParameterGroup = "AWS::MemoryDB::ParameterGroup"
    AWS__MemoryDB__SubnetGroup = "AWS::MemoryDB::SubnetGroup"
    AWS__MemoryDB__User = "AWS::MemoryDB::User"
    AWS__Neptune__DBCluster = "AWS::Neptune::DBCluster"
    AWS__Neptune__DBClusterParameterGroup = "AWS::Neptune::DBClusterParameterGroup"
    AWS__Neptune__DBInstance = "AWS::Neptune::DBInstance"
    AWS__Neptune__DBParameterGroup = "AWS::Neptune::DBParameterGroup"
    AWS__Neptune__DBSubnetGroup = "AWS::Neptune::DBSubnetGroup"
    AWS__NetworkFirewall__Firewall = "AWS::NetworkFirewall::Firewall"
    AWS__NetworkFirewall__FirewallPolicy = "AWS::NetworkFirewall::FirewallPolicy"
    AWS__NetworkFirewall__LoggingConfiguration = "AWS::NetworkFirewall::LoggingConfiguration"
    AWS__NetworkFirewall__RuleGroup = "AWS::NetworkFirewall::RuleGroup"
    AWS__NetworkManager__ConnectAttachment = "AWS::NetworkManager::ConnectAttachment"
    AWS__NetworkManager__ConnectPeer = "AWS::NetworkManager::ConnectPeer"
    AWS__NetworkManager__CoreNetwork = "AWS::NetworkManager::CoreNetwork"
    AWS__NetworkManager__CustomerGatewayAssociation = "AWS::NetworkManager::CustomerGatewayAssociation"
    AWS__NetworkManager__Device = "AWS::NetworkManager::Device"
    AWS__NetworkManager__GlobalNetwork = "AWS::NetworkManager::GlobalNetwork"
    AWS__NetworkManager__Link = "AWS::NetworkManager::Link"
    AWS__NetworkManager__LinkAssociation = "AWS::NetworkManager::LinkAssociation"
    AWS__NetworkManager__Site = "AWS::NetworkManager::Site"
    AWS__NetworkManager__SiteToSiteVpnAttachment = "AWS::NetworkManager::SiteToSiteVpnAttachment"
    AWS__NetworkManager__TransitGatewayRegistration = "AWS::NetworkManager::TransitGatewayRegistration"
    AWS__NetworkManager__VpcAttachment = "AWS::NetworkManager::VpcAttachment"
    AWS__OpenSearchService__Domain = "AWS::OpenSearchService::Domain"
    AWS__OpsWorks__App = "AWS::OpsWorks::App"
    AWS__OpsWorks__ElasticLoadBalancerAttachment = "AWS::OpsWorks::ElasticLoadBalancerAttachment"
    AWS__OpsWorks__Instance = "AWS::OpsWorks::Instance"
    AWS__OpsWorks__Layer = "AWS::OpsWorks::Layer"
    AWS__OpsWorks__Stack = "AWS::OpsWorks::Stack"
    AWS__OpsWorks__UserProfile = "AWS::OpsWorks::UserProfile"
    AWS__OpsWorks__Volume = "AWS::OpsWorks::Volume"
    AWS__OpsWorksCM__Server = "AWS::OpsWorksCM::Server"
    AWS__Personalize__Dataset = "AWS::Personalize::Dataset"
    AWS__Personalize__DatasetGroup = "AWS::Personalize::DatasetGroup"
    AWS__Personalize__Schema = "AWS::Personalize::Schema"
    AWS__Personalize__Solution = "AWS::Personalize::Solution"
    AWS__QLDB__Ledger = "AWS::QLDB::Ledger"
    AWS__QLDB__Stream = "AWS::QLDB::Stream"
    AWS__QuickSight__Analysis = "AWS::QuickSight::Analysis"
    AWS__QuickSight__Dashboard = "AWS::QuickSight::Dashboard"
    AWS__QuickSight__DataSet = "AWS::QuickSight::DataSet"
    AWS__QuickSight__DataSource = "AWS::QuickSight::DataSource"
    AWS__QuickSight__Template = "AWS::QuickSight::Template"
    AWS__QuickSight__Theme = "AWS::QuickSight::Theme"
    AWS__RAM__ResourceShare = "AWS::RAM::ResourceShare"
    AWS__RDS__DBCluster = "AWS::RDS::DBCluster"
    AWS__RDS__DBClusterParameterGroup = "AWS::RDS::DBClusterParameterGroup"
    AWS__RDS__DBInstance = "AWS::RDS::DBInstance"
    AWS__RDS__DBParameterGroup = "AWS::RDS::DBParameterGroup"
    AWS__RDS__DBProxy = "AWS::RDS::DBProxy"
    AWS__RDS__DBProxyEndpoint = "AWS::RDS::DBProxyEndpoint"
    AWS__RDS__DBProxyTargetGroup = "AWS::RDS::DBProxyTargetGroup"
    AWS__RDS__DBSecurityGroup = "AWS::RDS::DBSecurityGroup"
    AWS__RDS__DBSecurityGroupIngress = "AWS::RDS::DBSecurityGroupIngress"
    AWS__RDS__DBSubnetGroup = "AWS::RDS::DBSubnetGroup"
    AWS__RDS__EventSubscription = "AWS::RDS::EventSubscription"
    AWS__RDS__GlobalCluster = "AWS::RDS::GlobalCluster"
    AWS__RDS__OptionGroup = "AWS::RDS::OptionGroup"
    AWS__RUM__AppMonitor = "AWS::RUM::AppMonitor"
    AWS__Redshift__Cluster = "AWS::Redshift::Cluster"
    AWS__Redshift__ClusterParameterGroup = "AWS::Redshift::ClusterParameterGroup"
    AWS__Redshift__ClusterSecurityGroup = "AWS::Redshift::ClusterSecurityGroup"
    AWS__Redshift__ClusterSecurityGroupIngress = "AWS::Redshift::ClusterSecurityGroupIngress"
    AWS__Redshift__ClusterSubnetGroup = "AWS::Redshift::ClusterSubnetGroup"
    AWS__Redshift__EndpointAccess = "AWS::Redshift::EndpointAccess"
    AWS__Redshift__EndpointAuthorization = "AWS::Redshift::EndpointAuthorization"
    AWS__Redshift__EventSubscription = "AWS::Redshift::EventSubscription"
    AWS__Redshift__ScheduledAction = "AWS::Redshift::ScheduledAction"
    AWS__RedshiftServerless__Namespace = "AWS::RedshiftServerless::Namespace"
    AWS__RedshiftServerless__Workgroup = "AWS::RedshiftServerless::Workgroup"
    AWS__RefactorSpaces__Application = "AWS::RefactorSpaces::Application"
    AWS__RefactorSpaces__Environment = "AWS::RefactorSpaces::Environment"
    AWS__RefactorSpaces__Route = "AWS::RefactorSpaces::Route"
    AWS__RefactorSpaces__Service = "AWS::RefactorSpaces::Service"
    AWS__Rekognition__Collection = "AWS::Rekognition::Collection"
    AWS__Rekognition__Project = "AWS::Rekognition::Project"
    AWS__Rekognition__StreamProcessor = "AWS::Rekognition::StreamProcessor"
    AWS__ResilienceHub__App = "AWS::ResilienceHub::App"
    AWS__ResilienceHub__ResiliencyPolicy = "AWS::ResilienceHub::ResiliencyPolicy"
    AWS__ResourceGroups__Group = "AWS::ResourceGroups::Group"
    AWS__RoboMaker__Fleet = "AWS::RoboMaker::Fleet"
    AWS__RoboMaker__Robot = "AWS::RoboMaker::Robot"
    AWS__RoboMaker__RobotApplication = "AWS::RoboMaker::RobotApplication"
    AWS__RoboMaker__RobotApplicationVersion = "AWS::RoboMaker::RobotApplicationVersion"
    AWS__RoboMaker__SimulationApplication = "AWS::RoboMaker::SimulationApplication"
    AWS__RoboMaker__SimulationApplicationVersion = "AWS::RoboMaker::SimulationApplicationVersion"
    AWS__RolesAnywhere__CRL = "AWS::RolesAnywhere::CRL"
    AWS__RolesAnywhere__Profile = "AWS::RolesAnywhere::Profile"
    AWS__RolesAnywhere__TrustAnchor = "AWS::RolesAnywhere::TrustAnchor"
    AWS__Route53__CidrCollection = "AWS::Route53::CidrCollection"
    AWS__Route53__DNSSEC = "AWS::Route53::DNSSEC"
    AWS__Route53__HealthCheck = "AWS::Route53::HealthCheck"
    AWS__Route53__HostedZone = "AWS::Route53::HostedZone"
    AWS__Route53__KeySigningKey = "AWS::Route53::KeySigningKey"
    AWS__Route53__RecordSet = "AWS::Route53::RecordSet"
    AWS__Route53__RecordSetGroup = "AWS::Route53::RecordSetGroup"
    AWS__Route53Resolver__FirewallDomainList = "AWS::Route53Resolver::FirewallDomainList"
    AWS__Route53Resolver__FirewallRuleGroup = "AWS::Route53Resolver::FirewallRuleGroup"
    AWS__Route53Resolver__FirewallRuleGroupAssociation = "AWS::Route53Resolver::FirewallRuleGroupAssociation"
    AWS__Route53Resolver__ResolverConfig = "AWS::Route53Resolver::ResolverConfig"
    AWS__Route53Resolver__ResolverDNSSECConfig = "AWS::Route53Resolver::ResolverDNSSECConfig"
    AWS__Route53Resolver__ResolverEndpoint = "AWS::Route53Resolver::ResolverEndpoint"
    AWS__Route53Resolver__ResolverQueryLoggingConfig = "AWS::Route53Resolver::ResolverQueryLoggingConfig"
    AWS__Route53Resolver__ResolverQueryLoggingConfigAssociation = (
        "AWS::Route53Resolver::ResolverQueryLoggingConfigAssociation"
    )
    AWS__Route53Resolver__ResolverRule = "AWS::Route53Resolver::ResolverRule"
    AWS__Route53Resolver__ResolverRuleAssociation = "AWS::Route53Resolver::ResolverRuleAssociation"
    AWS__S3__AccessPoint = "AWS::S3::AccessPoint"
    AWS__S3__Bucket = "AWS::S3::Bucket"
    AWS__S3__BucketPolicy = "AWS::S3::BucketPolicy"
    AWS__S3__MultiRegionAccessPoint = "AWS::S3::MultiRegionAccessPoint"
    AWS__S3__MultiRegionAccessPointPolicy = "AWS::S3::MultiRegionAccessPointPolicy"
    AWS__S3__StorageLens = "AWS::S3::StorageLens"
    AWS__S3ObjectLambda__AccessPoint = "AWS::S3ObjectLambda::AccessPoint"
    AWS__S3ObjectLambda__AccessPointPolicy = "AWS::S3ObjectLambda::AccessPointPolicy"
    AWS__S3Outposts__AccessPoint = "AWS::S3Outposts::AccessPoint"
    AWS__S3Outposts__Bucket = "AWS::S3Outposts::Bucket"
    AWS__S3Outposts__BucketPolicy = "AWS::S3Outposts::BucketPolicy"
    AWS__S3Outposts__Endpoint = "AWS::S3Outposts::Endpoint"
    AWS__SDB__Domain = "AWS::SDB::Domain"
    AWS__SES__ConfigurationSet = "AWS::SES::ConfigurationSet"
    AWS__SES__ConfigurationSetEventDestination = "AWS::SES::ConfigurationSetEventDestination"
    AWS__SES__ContactList = "AWS::SES::ContactList"
    AWS__SES__DedicatedIpPool = "AWS::SES::DedicatedIpPool"
    AWS__SES__EmailIdentity = "AWS::SES::EmailIdentity"
    AWS__SES__Template = "AWS::SES::Template"
    AWS__SNS__Subscription = "AWS::SNS::Subscription"
    AWS__SNS__Topic = "AWS::SNS::Topic"
    AWS__SNS__TopicPolicy = "AWS::SNS::TopicPolicy"
    AWS__SQS__Queue = "AWS::SQS::Queue"
    AWS__SQS__QueuePolicy = "AWS::SQS::QueuePolicy"
    AWS__SSM__Association = "AWS::SSM::Association"
    AWS__SSM__Document = "AWS::SSM::Document"
    AWS__SSM__MaintenanceWindow = "AWS::SSM::MaintenanceWindow"
    AWS__SSM__MaintenanceWindowTarget = "AWS::SSM::MaintenanceWindowTarget"
    AWS__SSM__MaintenanceWindowTask = "AWS::SSM::MaintenanceWindowTask"
    AWS__SSM__Parameter = "AWS::SSM::Parameter"
    AWS__SSM__PatchBaseline = "AWS::SSM::PatchBaseline"
    AWS__SSM__ResourceDataSync = "AWS::SSM::ResourceDataSync"
    AWS__SSMContacts__Contact = "AWS::SSMContacts::Contact"
    AWS__SSMContacts__ContactChannel = "AWS::SSMContacts::ContactChannel"
    AWS__SSMIncidents__ReplicationSet = "AWS::SSMIncidents::ReplicationSet"
    AWS__SSMIncidents__ResponsePlan = "AWS::SSMIncidents::ResponsePlan"
    AWS__SSO__Assignment = "AWS::SSO::Assignment"
    AWS__SSO__InstanceAccessControlAttributeConfiguration = "AWS::SSO::InstanceAccessControlAttributeConfiguration"
    AWS__SSO__PermissionSet = "AWS::SSO::PermissionSet"
    AWS__SageMaker__App = "AWS::SageMaker::App"
    AWS__SageMaker__AppImageConfig = "AWS::SageMaker::AppImageConfig"
    AWS__SageMaker__CodeRepository = "AWS::SageMaker::CodeRepository"
    AWS__SageMaker__DataQualityJobDefinition = "AWS::SageMaker::DataQualityJobDefinition"
    AWS__SageMaker__Device = "AWS::SageMaker::Device"
    AWS__SageMaker__DeviceFleet = "AWS::SageMaker::DeviceFleet"
    AWS__SageMaker__Domain = "AWS::SageMaker::Domain"
    AWS__SageMaker__Endpoint = "AWS::SageMaker::Endpoint"
    AWS__SageMaker__EndpointConfig = "AWS::SageMaker::EndpointConfig"
    AWS__SageMaker__FeatureGroup = "AWS::SageMaker::FeatureGroup"
    AWS__SageMaker__Image = "AWS::SageMaker::Image"
    AWS__SageMaker__ImageVersion = "AWS::SageMaker::ImageVersion"
    AWS__SageMaker__Model = "AWS::SageMaker::Model"
    AWS__SageMaker__ModelBiasJobDefinition = "AWS::SageMaker::ModelBiasJobDefinition"
    AWS__SageMaker__ModelExplainabilityJobDefinition = "AWS::SageMaker::ModelExplainabilityJobDefinition"
    AWS__SageMaker__ModelPackage = "AWS::SageMaker::ModelPackage"
    AWS__SageMaker__ModelPackageGroup = "AWS::SageMaker::ModelPackageGroup"
    AWS__SageMaker__ModelQualityJobDefinition = "AWS::SageMaker::ModelQualityJobDefinition"
    AWS__SageMaker__MonitoringSchedule = "AWS::SageMaker::MonitoringSchedule"
    AWS__SageMaker__NotebookInstance = "AWS::SageMaker::NotebookInstance"
    AWS__SageMaker__NotebookInstanceLifecycleConfig = "AWS::SageMaker::NotebookInstanceLifecycleConfig"
    AWS__SageMaker__Pipeline = "AWS::SageMaker::Pipeline"
    AWS__SageMaker__Project = "AWS::SageMaker::Project"
    AWS__SageMaker__UserProfile = "AWS::SageMaker::UserProfile"
    AWS__SageMaker__Workteam = "AWS::SageMaker::Workteam"
    AWS__SecretsManager__ResourcePolicy = "AWS::SecretsManager::ResourcePolicy"
    AWS__SecretsManager__RotationSchedule = "AWS::SecretsManager::RotationSchedule"
    AWS__SecretsManager__Secret = "AWS::SecretsManager::Secret"
    AWS__SecretsManager__SecretTargetAttachment = "AWS::SecretsManager::SecretTargetAttachment"
    AWS__SecurityHub__Hub = "AWS::SecurityHub::Hub"
    AWS__ServiceCatalog__AcceptedPortfolioShare = "AWS::ServiceCatalog::AcceptedPortfolioShare"
    AWS__ServiceCatalog__CloudFormationProduct = "AWS::ServiceCatalog::CloudFormationProduct"
    AWS__ServiceCatalog__CloudFormationProvisionedProduct = "AWS::ServiceCatalog::CloudFormationProvisionedProduct"
    AWS__ServiceCatalog__LaunchNotificationConstraint = "AWS::ServiceCatalog::LaunchNotificationConstraint"
    AWS__ServiceCatalog__LaunchRoleConstraint = "AWS::ServiceCatalog::LaunchRoleConstraint"
    AWS__ServiceCatalog__LaunchTemplateConstraint = "AWS::ServiceCatalog::LaunchTemplateConstraint"
    AWS__ServiceCatalog__Portfolio = "AWS::ServiceCatalog::Portfolio"
    AWS__ServiceCatalog__PortfolioPrincipalAssociation = "AWS::ServiceCatalog::PortfolioPrincipalAssociation"
    AWS__ServiceCatalog__PortfolioProductAssociation = "AWS::ServiceCatalog::PortfolioProductAssociation"
    AWS__ServiceCatalog__PortfolioShare = "AWS::ServiceCatalog::PortfolioShare"
    AWS__ServiceCatalog__ResourceUpdateConstraint = "AWS::ServiceCatalog::ResourceUpdateConstraint"
    AWS__ServiceCatalog__ServiceAction = "AWS::ServiceCatalog::ServiceAction"
    AWS__ServiceCatalog__ServiceActionAssociation = "AWS::ServiceCatalog::ServiceActionAssociation"
    AWS__ServiceCatalog__StackSetConstraint = "AWS::ServiceCatalog::StackSetConstraint"
    AWS__ServiceCatalog__TagOption = "AWS::ServiceCatalog::TagOption"
    AWS__ServiceCatalog__TagOptionAssociation = "AWS::ServiceCatalog::TagOptionAssociation"
    AWS__ServiceCatalogAppRegistry__Application = "AWS::ServiceCatalogAppRegistry::Application"
    AWS__ServiceCatalogAppRegistry__AttributeGroup = "AWS::ServiceCatalogAppRegistry::AttributeGroup"
    AWS__ServiceCatalogAppRegistry__AttributeGroupAssociation = (
        "AWS::ServiceCatalogAppRegistry::AttributeGroupAssociation"
    )
    AWS__ServiceCatalogAppRegistry__ResourceAssociation = "AWS::ServiceCatalogAppRegistry::ResourceAssociation"
    AWS__ServiceDiscovery__HttpNamespace = "AWS::ServiceDiscovery::HttpNamespace"
    AWS__ServiceDiscovery__Instance = "AWS::ServiceDiscovery::Instance"
    AWS__ServiceDiscovery__PrivateDnsNamespace = "AWS::ServiceDiscovery::PrivateDnsNamespace"
    AWS__ServiceDiscovery__PublicDnsNamespace = "AWS::ServiceDiscovery::PublicDnsNamespace"
    AWS__ServiceDiscovery__Service = "AWS::ServiceDiscovery::Service"
    AWS__Signer__ProfilePermission = "AWS::Signer::ProfilePermission"
    AWS__Signer__SigningProfile = "AWS::Signer::SigningProfile"
    AWS__StepFunctions__Activity = "AWS::StepFunctions::Activity"
    AWS__StepFunctions__StateMachine = "AWS::StepFunctions::StateMachine"
    AWS__Synthetics__Canary = "AWS::Synthetics::Canary"
    AWS__Synthetics__Group = "AWS::Synthetics::Group"
    AWS__Timestream__Database = "AWS::Timestream::Database"
    AWS__Timestream__ScheduledQuery = "AWS::Timestream::ScheduledQuery"
    AWS__Timestream__Table = "AWS::Timestream::Table"
    AWS__Transfer__Server = "AWS::Transfer::Server"
    AWS__Transfer__User = "AWS::Transfer::User"
    AWS__Transfer__Workflow = "AWS::Transfer::Workflow"
    AWS__WAF__ByteMatchSet = "AWS::WAF::ByteMatchSet"
    AWS__WAF__IPSet = "AWS::WAF::IPSet"
    AWS__WAF__Rule = "AWS::WAF::Rule"
    AWS__WAF__SizeConstraintSet = "AWS::WAF::SizeConstraintSet"
    AWS__WAF__SqlInjectionMatchSet = "AWS::WAF::SqlInjectionMatchSet"
    AWS__WAF__WebACL = "AWS::WAF::WebACL"
    AWS__WAF__XssMatchSet = "AWS::WAF::XssMatchSet"
    AWS__WAFRegional__ByteMatchSet = "AWS::WAFRegional::ByteMatchSet"
    AWS__WAFRegional__GeoMatchSet = "AWS::WAFRegional::GeoMatchSet"
    AWS__WAFRegional__IPSet = "AWS::WAFRegional::IPSet"
    AWS__WAFRegional__RateBasedRule = "AWS::WAFRegional::RateBasedRule"
    AWS__WAFRegional__RegexPatternSet = "AWS::WAFRegional::RegexPatternSet"
    AWS__WAFRegional__Rule = "AWS::WAFRegional::Rule"
    AWS__WAFRegional__SizeConstraintSet = "AWS::WAFRegional::SizeConstraintSet"
    AWS__WAFRegional__SqlInjectionMatchSet = "AWS::WAFRegional::SqlInjectionMatchSet"
    AWS__WAFRegional__WebACL = "AWS::WAFRegional::WebACL"
    AWS__WAFRegional__WebACLAssociation = "AWS::WAFRegional::WebACLAssociation"
    AWS__WAFRegional__XssMatchSet = "AWS::WAFRegional::XssMatchSet"
    AWS__WAFv2__IPSet = "AWS::WAFv2::IPSet"
    AWS__WAFv2__LoggingConfiguration = "AWS::WAFv2::LoggingConfiguration"
    AWS__WAFv2__RegexPatternSet = "AWS::WAFv2::RegexPatternSet"
    AWS__WAFv2__RuleGroup = "AWS::WAFv2::RuleGroup"
    AWS__WAFv2__WebACL = "AWS::WAFv2::WebACL"
    AWS__WAFv2__WebACLAssociation = "AWS::WAFv2::WebACLAssociation"
    AWS__WorkSpaces__Workspace = "AWS::WorkSpaces::Workspace"
    AWS__XRay__Group = "AWS::XRay::Group"
    AWS__XRay__SamplingRule = "AWS::XRay::SamplingRule"
    Alexa__ASK__Skill = "Alexa::ASK::Skill"


class Type9(Enum):
    CloudWatchEvent = "CloudWatchEvent"


class Type10(Enum):
    CloudWatchLogs = "CloudWatchLogs"


class Type11(Enum):
    Cognito = "Cognito"


class CognitoUserPoolLambdaConfig(BaseModel):
    __root__: Any


class Type12(Enum):
    DynamoDB = "DynamoDB"


class Type13(Enum):
    EventBridgeRule = "EventBridgeRule"


class FnFindInMap(BaseModel):
    Fn__FindInMap: List[Union[Any, Any, Any]] = Field(..., alias="Fn::FindInMap", max_items=3, min_items=3)


class FnGetAtt(BaseModel):
    Fn__GetAtt: Union[List[Union[Any, Any]], str] = Field(..., alias="Fn::GetAtt")


class FnIf(BaseModel):
    Fn__If: List[Union[Any, Any, Any]] = Field(..., alias="Fn::If", max_items=3, min_items=3)


class FnJoin(BaseModel):
    Fn__Join: List[Union[Any, List]] = Field(..., alias="Fn::Join", max_items=2, min_items=2)


class FnSelect(BaseModel):
    Fn__Select: List[Union[Any, List]] = Field(..., alias="Fn::Select", max_items=2, min_items=2)


class FnSub(BaseModel):
    Fn__Sub: Union[List[Union[str, Dict[str, Any]]], str] = Field(..., alias="Fn::Sub")


class Auth2(BaseModel):
    AuthorizationScopes: Optional[List[str]] = None
    Authorizer: Optional[str] = None


class Type14(Enum):
    HttpApi = "HttpApi"


class Type15(Enum):
    IoTRule = "IoTRule"


class Type16(Enum):
    Kinesis = "Kinesis"


class Type17(Enum):
    MQ = "MQ"


class Type18(Enum):
    MSK = "MSK"


class Ref(BaseModel):
    Ref: str


class S3Key(BaseModel):
    Rules: Any


class FilterItem(BaseModel):
    S3Key: S3Key


class Type19(Enum):
    S3 = "S3"


class SamBoolean(BaseModel):
    __root__: Union[Ref, FnJoin, FnSub, FnGetAtt, FnIf, FnFindInMap, FnSelect, bool] = Field(
        ..., description="Boolean with partial support for intrinsics."
    )


class SamBoolean1(BaseModel):
    __root__: Union[Ref, FnJoin, FnSub, FnGetAtt, FnIf, FnFindInMap, FnSelect, bool] = Field(
        ..., description="A CloudFormation boolean with full intrinsics support."
    )


class SamInteger(BaseModel):
    __root__: Union[Ref, FnJoin, FnSub, FnGetAtt, FnIf, FnFindInMap, FnSelect, float] = Field(
        ..., description="Integer with partial support for intrinsics."
    )


class SamJson(BaseModel):
    __root__: Any


class SamString(BaseModel):
    __root__: Union[Ref, FnJoin, FnSub, FnGetAtt, FnIf, FnFindInMap, FnSelect, str] = Field(
        ..., description="String with partial support for intrinsics."
    )


class SamStringList(BaseModel):
    __root__: Union[
        Ref,
        FnJoin,
        FnSub,
        FnGetAtt,
        FnIf,
        FnFindInMap,
        FnSelect,
        List[Union[Ref, FnJoin, FnSub, FnGetAtt, FnIf, FnFindInMap, FnSelect, str]],
    ] = Field(..., description="List of strings with partial support for intrinsics.")


class SamString1(BaseModel):
    __root__: Union[Ref, FnJoin, FnSub, FnGetAtt, FnIf, FnFindInMap, FnSelect, str] = Field(
        ..., description="A CloudFormation string with full intrinsics support."
    )


class Type20(Enum):
    Schedule = "Schedule"


class Type21(Enum):
    SelfManagedKafka = "SelfManagedKafka"


class Type22(Enum):
    SNS = "SNS"


class Type23(Enum):
    SQS = "SQS"


class _Type(BaseModel):
    Type: Optional[CfnResourceType] = None


class ResourcePolicy1(BaseModel):
    AwsAccountBlacklist: Optional[SamStringList] = None
    AwsAccountWhitelist: Optional[SamStringList] = None
    CustomStatements: Optional[Any] = None
    IntrinsicVpcBlacklist: Optional[SamStringList] = None
    IntrinsicVpcWhitelist: Optional[SamStringList] = None
    IntrinsicVpceBlacklist: Optional[SamStringList] = None
    IntrinsicVpceWhitelist: Optional[SamStringList] = None
    IpRangeBlacklist: Optional[SamStringList] = None
    IpRangeWhitelist: Optional[SamStringList] = None
    SourceVpcBlacklist: Optional[SamStringList] = None
    SourceVpcWhitelist: Optional[SamStringList] = None


class Cor(BaseModel):
    AllowCredentials: Optional[SamBoolean] = None
    AllowHeaders: Optional[SamString] = None
    AllowMethods: Optional[SamString] = None
    AllowOrigin: SamString1
    MaxAge: Optional[SamString] = None


class LocationItem(BaseModel):
    ApplicationId: SamString1
    SemanticVersion: SamString1


class Tracing(BaseModel):
    Enabled: SamBoolean1


class CfnBoolean(BaseModel):
    __root__: Union[Ref, FnJoin, FnSub, FnGetAtt, FnIf, FnFindInMap, FnSelect, bool] = Field(
        ..., description="A CloudFormation boolean with full intrinsics support."
    )


class CfnBoolean1(BaseModel):
    __root__: Union[Ref, FnJoin, FnSub, FnGetAtt, FnIf, FnFindInMap, FnSelect, bool] = Field(
        ..., description="A CloudFormation boolean with full intrinsics support."
    )


class CfnDouble(BaseModel):
    __root__: Union[Ref, FnJoin, FnSub, FnGetAtt, FnIf, FnFindInMap, FnSelect, float] = Field(
        ..., description="A CloudFormation double with full intrinsics support."
    )


class CfnInteger(BaseModel):
    __root__: Union[Ref, FnJoin, FnSub, FnGetAtt, FnIf, FnFindInMap, FnSelect, float] = Field(
        ..., description="A CloudFormation integer with full intrinsics support."
    )


class CfnInteger1(BaseModel):
    __root__: Union[Ref, FnJoin, FnSub, FnGetAtt, FnIf, FnFindInMap, FnSelect, float] = Field(
        ..., description="A CloudFormation integer with full intrinsics support."
    )


class CfnString(BaseModel):
    __root__: Union[Ref, FnJoin, FnSub, FnGetAtt, FnIf, FnFindInMap, FnSelect, str] = Field(
        ..., description="A CloudFormation string with full intrinsics support."
    )


class CfnStringMap(BaseModel):
    __root__: Union[Ref, FnJoin, FnSub, FnGetAtt, FnIf, FnFindInMap, FnSelect, Dict[str, SamString1]]


class CfnString1(BaseModel):
    __root__: Union[Ref, FnJoin, FnSub, FnGetAtt, FnIf, FnFindInMap, FnSelect, str] = Field(
        ..., description="A CloudFormation string with full intrinsics support."
    )


class Properties9(BaseModel):
    EventBusName: Optional[CfnString] = None
    Input: Optional[CfnString] = None
    InputPath: Optional[CfnString] = None
    Pattern: CfnJson


class CloudWatchEvent(BaseModel):
    Properties: Properties9
    Type: Type9


class Properties10(BaseModel):
    FilterPattern: CfnString1
    LogGroupName: CfnString1


class CloudWatchLogsEvent(BaseModel):
    Properties: Properties10
    Type: Type10


class Identity(BaseModel):
    Header: Optional[SamString] = None
    ReauthorizeEvery: Optional[SamInteger] = None
    ValidationExpression: Optional[SamString] = None


class CognitoAuthorizer(BaseModel):
    AuthorizationScopes: Optional[SamStringList] = None
    Identity: Optional[Identity] = None
    UserPoolArn: SamString1


class Properties11(BaseModel):
    Trigger: CognitoUserPoolLambdaConfig
    UserPool: CfnString1


class CognitoEvent(BaseModel):
    Properties: Properties11
    Type: Type11


class DeadLetterQueue1(BaseModel):
    TargetArn: CfnString1
    Type: str


class Hooks(BaseModel):
    PostTraffic: Optional[Union[Ref, FnJoin, FnSub, FnGetAtt, FnIf, FnFindInMap, FnSelect, str]] = None
    PreTraffic: Optional[Union[Ref, FnJoin, FnSub, FnGetAtt, FnIf, FnFindInMap, FnSelect, str]] = None


class DeploymentPreference1(BaseModel):
    Alarms: Optional[
        Union[
            Ref,
            FnJoin,
            FnSub,
            FnGetAtt,
            FnIf,
            FnFindInMap,
            FnSelect,
            List[Union[Ref, FnJoin, FnSub, FnGetAtt, FnIf, FnFindInMap, FnSelect, str]],
        ]
    ] = None
    Enabled: Optional[Union[Ref, FnJoin, FnSub, FnGetAtt, FnIf, FnFindInMap, FnSelect, bool]] = None
    Hooks: Optional[Hooks] = None
    PassthroughCondition: Optional[Union[Ref, FnJoin, FnSub, FnGetAtt, FnIf, FnFindInMap, FnSelect, bool]] = None
    Role: Optional[Union[Ref, FnJoin, FnSub, FnGetAtt, FnIf, FnFindInMap, FnSelect, str]] = None
    TriggerConfigurations: Optional[Any] = None
    Type: Optional[Union[Ref, FnJoin, FnSub, FnGetAtt, FnIf, FnFindInMap, FnSelect, str]] = None


class OnFailure(BaseModel):
    Destination: CfnString1
    Type: Optional[str] = None


class DestinationConfig(BaseModel):
    OnFailure: OnFailure


class DestinationConfig1(BaseModel):
    __root__: DestinationConfig


class Target(BaseModel):
    Id: CfnString1


class EventsRuleRetryPolicy1(BaseModel):
    MaximumEventAgeInSeconds: Optional[CfnInteger] = None
    MaximumRetryAttempts: Optional[CfnInteger] = None


class FileSystemConfig(BaseModel):
    Arn: CfnString1
    LocalMountPath: CfnString1


class Filter(BaseModel):
    Pattern: CfnString1


class FilterCriteria1(BaseModel):
    Filters: List[Filter]


class FunctionCode(BaseModel):
    Bucket: Union[Ref, FnJoin, FnSub, FnGetAtt, FnIf, FnFindInMap, FnSelect, str]
    Key: Union[Ref, FnJoin, FnSub, FnGetAtt, FnIf, FnFindInMap, FnSelect, str]
    Version: Optional[Union[Ref, FnJoin, FnSub, FnGetAtt, FnIf, FnFindInMap, FnSelect, str]] = None


class FunctionUrlConfig1(BaseModel):
    AuthType: CfnString1
    Cors: Optional[Any] = None


class Properties14(BaseModel):
    ApiId: Optional[CfnString] = None
    Auth: Optional[Auth2] = None
    Method: Optional[str] = None
    Path: Optional[str] = None
    PayloadFormatVersion: Optional[CfnString] = None
    RouteSettings: Optional[CfnJson] = None
    TimeoutInMillis: Optional[CfnInteger] = None


class HttpApiEvent(BaseModel):
    Properties: Optional[Properties14] = None
    Type: Type14


class Properties15(BaseModel):
    AwsIotSqlVersion: Optional[CfnString] = None
    Sql: CfnString1


class IotRuleEvent(BaseModel):
    Properties: Properties15
    Type: Type15


class Identity1(BaseModel):
    Context: Optional[SamStringList] = None
    Headers: Optional[SamStringList] = None
    QueryStrings: Optional[SamStringList] = None
    ReauthorizeEvery: Optional[SamInteger] = None
    StageVariables: Optional[SamStringList] = None


class LambdaRequestAuthorizer(BaseModel):
    AuthorizationScopes: Optional[SamStringList] = None
    FunctionArn: Optional[SamString] = None
    FunctionInvokeRole: Optional[SamString] = None
    FunctionPayloadType: Optional[SamString] = None
    Identity: Optional[Identity1] = None


class Identity2(BaseModel):
    ReauthorizeEvery: Optional[SamInteger] = None
    ValidationExpression: Optional[SamString] = None


class LambdaTokenAuthorizer(BaseModel):
    AuthorizationScopes: Optional[SamStringList] = None
    FunctionArn: SamString1
    FunctionInvokeRole: Optional[SamString] = None
    FunctionPayloadType: Optional[SamString] = None
    Identity: Optional[Identity2] = None


class Partial(BaseModel):
    __root__: _Type


class Properties19(BaseModel):
    Bucket: CfnString1
    Events: Union[Ref, FnJoin, FnSub, FnGetAtt, FnIf, FnFindInMap, FnSelect, List[CfnString1], str]
    Filter: Optional[Union[Ref, FnJoin, FnSub, FnGetAtt, FnIf, FnFindInMap, FnSelect, FilterItem]] = None


class S3Event(BaseModel):
    Properties: Properties19
    Type: Type19


class SqsSubscriptionItem(BaseModel):
    BatchSize: Optional[Union[str, float]] = None
    Enabled: Optional[bool] = None
    QueueArn: CfnString1
    QueuePolicyLogicalId: Optional[str] = None
    QueueUrl: CfnString1


class Properties22(BaseModel):
    FilterPolicy: Optional[CfnJson] = None
    Region: Optional[CfnString] = None
    SqsSubscription: Optional[Union[SqsSubscriptionItem, bool]] = None
    Topic: CfnString1


class SnsEvent(BaseModel):
    Properties: Properties22
    Type: Type22


class SourceAccessConfiguration(BaseModel):
    Type: Optional[CfnString] = None
    URI: Optional[CfnString] = None


class AccessLogSetting(BaseModel):
    DestinationArn: Optional[CfnString] = None
    Format: Optional[CfnString] = None


class Quota(BaseModel):
    Limit: Optional[CfnInteger] = None
    Offset: Optional[CfnInteger] = None
    Period: Optional[CfnString] = None


class Tag(BaseModel):
    Key: CfnString1
    Value: CfnString1


class Throttle(BaseModel):
    BurstLimit: Optional[CfnInteger] = None
    RateLimit: Optional[CfnDouble] = None


class UsagePlan(BaseModel):
    CreateUsagePlan: SamString1
    Description: Optional[CfnString] = None
    Quota: Optional[Quota] = None
    Tags: Optional[List[Tag]] = None
    Throttle: Optional[Throttle] = None
    UsagePlanName: Optional[CfnString] = None


class Auth1(BaseModel):
    AddDefaultAuthorizerToCorsPreflight: Optional[bool] = None
    ApiKeyRequired: Optional[bool] = None
    Authorizers: Optional[Dict[str, Union[CognitoAuthorizer, LambdaTokenAuthorizer, LambdaRequestAuthorizer]]] = None
    DefaultAuthorizer: Optional[SamString] = None
    InvokeRole: Optional[SamString] = None
    ResourcePolicy: Optional[ResourcePolicy1] = None
    UsagePlan: Optional[UsagePlan] = None


class CanarySetting(BaseModel):
    DeploymentId: Optional[CfnString] = None
    PercentTraffic: Optional[CfnDouble] = None
    StageVariableOverrides: Optional[Any] = None
    UseStageCache: Optional[CfnBoolean] = None


class DefinitionUriItem(BaseModel):
    Bucket: CfnString1
    Key: CfnString1
    Version: Optional[Union[Ref, FnJoin, FnSub, FnGetAtt, FnIf, FnFindInMap, FnSelect, Union[str, float]]] = None


class MutualTlsAuthentication(BaseModel):
    TruststoreUri: Optional[CfnString] = None
    TruststoreVersion: Optional[CfnString] = None


class Route53(BaseModel):
    DistributionDomainName: Optional[CfnString] = None
    EvaluateTargetHealth: Optional[CfnBoolean] = None
    HostedZoneId: Optional[CfnString] = None
    HostedZoneName: Optional[CfnString] = None
    IpV6: Optional[SamBoolean] = None


class Domain(BaseModel):
    BasePath: Optional[SamStringList] = None
    CertificateArn: CfnString1
    DomainName: CfnString1
    EndpointConfiguration: Optional[SamString] = None
    MutualTlsAuthentication: Optional[MutualTlsAuthentication] = None
    OwnershipVerificationCertificateArn: Optional[CfnString] = None
    Route53: Optional[Route53] = None
    SecurityPolicy: Optional[CfnString] = None


class Environment(BaseModel):
    Variables: Dict[str, CfnString1]


class ContentUriItem(BaseModel):
    Bucket: CfnString1
    Key: CfnString1
    Version: Optional[CfnString] = None


class PrimaryKey(BaseModel):
    Name: CfnString1
    Type: CfnString1


class ProvisionedThroughput(BaseModel):
    ReadCapacityUnits: CfnInteger1
    WriteCapacityUnits: CfnInteger1


class SSESpecification(BaseModel):
    KMSMasterKeyId: Optional[CfnString] = None
    SSEEnabled: CfnBoolean1
    SSEType: Optional[CfnString] = None


class Properties7(BaseModel):
    PrimaryKey: Optional[PrimaryKey] = None
    ProvisionedThroughput: Optional[ProvisionedThroughput] = None
    SSESpecification: Optional[SSESpecification] = None
    TableName: Optional[CfnString] = None
    Tags: Optional[Dict[str, CfnString1]] = None


class AwsServerlessSimpleTable(BaseModel):
    Properties: Optional[Properties7] = None
    Type: Type7


class DefinitionUriItem1(BaseModel):
    Bucket: CfnString1
    Key: CfnString1
    Version: Optional[Union[Ref, FnJoin, FnSub, FnGetAtt, FnIf, FnFindInMap, FnSelect, Union[str, float]]] = None


class Properties8(BaseModel):
    Definition: Optional[SamJson] = None
    DefinitionSubstitutions: Optional[SamJson] = None
    DefinitionUri: Optional[Union[DefinitionUriItem1, str]] = None
    Events: Optional[Any] = None
    Logging: Optional[Any] = None
    Name: Optional[CfnString] = None
    PermissionsBoundary: Optional[CfnString] = None
    Policies: Optional[Any] = None
    Role: Optional[CfnString] = None
    Tags: Optional[SamJson] = None
    Tracing: Optional[Tracing] = None
    Type: Optional[CfnString] = None


class AwsServerlessStateMachine(BaseModel):
    Properties: Optional[Properties8] = None
    Type: Type8


class CfnStringList(BaseModel):
    __root__: Union[Ref, FnJoin, FnSub, FnGetAtt, FnIf, FnFindInMap, FnSelect, List[CfnString1]] = Field(
        ..., description="A CloudFormation list of strings with full intrinsics support."
    )


class CfnStringList1(BaseModel):
    __root__: Union[Ref, FnJoin, FnSub, FnGetAtt, FnIf, FnFindInMap, FnSelect, List[CfnString1]] = Field(
        ..., description="A CloudFormation list of strings with full intrinsics support."
    )


class DeadLetterQueue(BaseModel):
    __root__: DeadLetterQueue1


class DeploymentPreference(BaseModel):
    __root__: DeploymentPreference1


class Properties12(BaseModel):
    BatchSize: Optional[CfnInteger] = None
    BisectBatchOnFunctionError: Optional[CfnBoolean] = None
    DestinationConfig: Optional[DestinationConfig1] = None
    Enabled: Optional[CfnBoolean] = None
    FilterCriteria: Optional[Union[Ref, FnJoin, FnSub, FnGetAtt, FnIf, FnFindInMap, FnSelect, FilterCriteria1]] = None
    FunctionResponseTypes: Optional[CfnStringList] = None
    MaximumBatchingWindowInSeconds: Optional[CfnInteger] = None
    MaximumRecordAgeInSeconds: Optional[CfnInteger] = None
    MaximumRetryAttempts: Optional[CfnInteger] = None
    ParallelizationFactor: Optional[CfnInteger] = None
    StartingPosition: CfnString1
    Stream: CfnString1
    TumblingWindowInSeconds: Optional[CfnInteger] = None


class DynamoDbEvent(BaseModel):
    Properties: Properties12
    Type: Type12


class EventsRuleRetryPolicy(BaseModel):
    __root__: EventsRuleRetryPolicy1


class FilterCriteria(BaseModel):
    __root__: FilterCriteria1


class FunctionUrlConfig(BaseModel):
    __root__: FunctionUrlConfig1


class Properties16(BaseModel):
    BatchSize: Optional[CfnInteger] = None
    BisectBatchOnFunctionError: Optional[CfnBoolean] = None
    DestinationConfig: Optional[Optional[DestinationConfig]] = None
    Enabled: Optional[CfnBoolean] = None
    FilterCriteria: Optional[FilterCriteria] = None
    FunctionResponseTypes: Optional[CfnStringList] = None
    MaximumBatchingWindowInSeconds: Optional[CfnInteger] = None
    MaximumRecordAgeInSeconds: Optional[CfnInteger] = None
    MaximumRetryAttempts: Optional[CfnInteger] = None
    ParallelizationFactor: Optional[CfnInteger] = None
    StartingPosition: CfnString1
    Stream: CfnString1
    TumblingWindowInSeconds: Optional[CfnInteger] = None


class KinesisEvent(BaseModel):
    Properties: Properties16
    Type: Type16


class Properties17(BaseModel):
    BatchSize: Optional[CfnInteger] = None
    Broker: CfnString1
    Enabled: Optional[CfnBoolean] = None
    MaximumBatchingWindowInSeconds: Optional[CfnInteger] = None
    Queues: CfnStringList1
    SecretsManagerKmsKeyId: Optional[str] = None
    SourceAccessConfigurations: List[SourceAccessConfiguration]


class MqEvent(BaseModel):
    Properties: Properties17
    Type: Type17


class Properties18(BaseModel):
    ConsumerGroupId: Optional[CfnString] = None
    MaximumBatchingWindowInSeconds: Optional[CfnInteger] = None
    StartingPosition: CfnString1
    Stream: CfnString1
    Topics: CfnStringList1


class MskEvent(BaseModel):
    Properties: Properties18
    Type: Type18


class Properties20(BaseModel):
    DeadLetterConfig: Optional[Any] = None
    Description: Optional[CfnString] = None
    Enabled: Optional[bool] = None
    Input: Optional[CfnString] = None
    Name: Optional[CfnString] = None
    RetryPolicy: Optional[EventsRuleRetryPolicy] = None
    Schedule: CfnString1


class ScheduleEvent(BaseModel):
    Properties: Properties20
    Type: Type20


class Properties21(BaseModel):
    BatchSize: Optional[CfnInteger] = None
    ConsumerGroupId: Optional[CfnString] = None
    Enabled: Optional[CfnBoolean] = None
    KafkaBootstrapServers: Optional[CfnStringList] = None
    SourceAccessConfigurations: List[SourceAccessConfiguration]
    Topics: CfnStringList1


class SelfManagedKafkaEvent(BaseModel):
    Properties: Properties21
    Type: Type21


class Properties23(BaseModel):
    BatchSize: Optional[CfnInteger] = None
    Enabled: Optional[CfnBoolean] = None
    FilterCriteria: Optional[FilterCriteria] = None
    MaximumBatchingWindowInSeconds: Optional[CfnInteger] = None
    Queue: CfnString1


class SqsEvent(BaseModel):
    Properties: Properties23
    Type: Type23


class VpcConfig1(BaseModel):
    SecurityGroupIds: Optional[CfnStringList] = None
    SubnetIds: Optional[CfnStringList] = None


class ResourcePolicy(BaseModel):
    AwsAccountBlacklist: Optional[List[str]] = None
    AwsAccountWhitelist: Optional[CfnStringList] = None
    CustomStatements: Optional[List] = None
    IntrinsicVpcBlacklist: Optional[List[str]] = None
    IntrinsicVpcWhitelist: Optional[List[str]] = None
    IntrinsicVpceBlacklist: Optional[List[str]] = None
    IntrinsicVpceWhitelist: Optional[List[str]] = None
    IpRangeBlacklist: Optional[List[str]] = None
    IpRangeWhitelist: Optional[List[str]] = None
    SourceVpcBlacklist: Optional[List[str]] = None
    SourceVpcWhitelist: Optional[List[str]] = None


class Auth(BaseModel):
    ApiKeyRequired: Optional[bool] = None
    AuthorizationScopes: Optional[List[str]] = None
    Authorizer: Optional[str] = None
    InvokeRole: Optional[Optional[str]] = None
    ResourcePolicy: Optional[ResourcePolicy] = None


class Properties1(BaseModel):
    Auth: Optional[Auth] = None
    Method: str
    Path: str
    RequestModel: Optional[RequestModel] = None
    RequestParameters: Optional[Union[List[str], List[Dict[str, RequestParameters]], str]] = None
    RestApiId: Optional[CfnString] = None


class ApiEvent(BaseModel):
    Properties: Properties1
    Type: Type1


class EndpointConfiguration(BaseModel):
    Type: Optional[CfnString] = None
    VPCEndpointIds: Optional[CfnStringList] = None


class Properties2(BaseModel):
    AccessLogSetting: Optional[AccessLogSetting] = None
    ApiKeySourceType: Optional[CfnString] = None
    Auth: Optional[Auth1] = None
    BinaryMediaTypes: Optional[CfnStringList] = None
    CacheClusterEnabled: Optional[CfnBoolean] = None
    CacheClusterSize: Optional[CfnString] = None
    CanarySetting: Optional[CanarySetting] = None
    Cors: Optional[Union[Cor, str]] = None
    DefinitionBody: Optional[SamJson] = None
    DefinitionUri: Optional[
        Union[Ref, FnJoin, FnSub, FnGetAtt, FnIf, FnFindInMap, FnSelect, DefinitionUriItem, str]
    ] = None
    Description: Optional[CfnString] = None
    DisableExecuteApiEndpoint: Optional[CfnBoolean] = None
    Domain: Optional[Domain] = None
    EndpointConfiguration: Optional[EndpointConfiguration] = None
    FailOnWarnings: Optional[CfnBoolean] = None
    GatewayResponses: Optional[SamJson] = None
    MethodSettings: Optional[Any] = None
    MinimumCompressionSize: Optional[CfnInteger] = None
    Mode: Optional[CfnString] = None
    Models: Optional[SamJson] = None
    Name: Optional[CfnString] = None
    OpenApiVersion: Optional[Union[Ref, FnJoin, FnSub, FnGetAtt, FnIf, FnFindInMap, FnSelect, Union[str, float]]] = None
    StageName: SamString1
    Tags: Optional[Dict[str, SamString1]] = None
    TracingEnabled: Optional[CfnBoolean] = None
    Variables: Optional[Dict[str, SamString1]] = None


class AwsServerlessApi(BaseModel):
    Properties: Properties2
    Type: Type2


class Properties3(BaseModel):
    Location: Union[LocationItem, str]
    NotificationARNs: Optional[CfnStringList] = None
    Parameters: Optional[CfnStringMap] = None
    Tags: Optional[Dict[str, str]] = None
    TimeoutInMinutes: Optional[CfnInteger] = None


class AwsServerlessApplication(BaseModel):
    Properties: Properties3
    Type: Type3


class Properties6(BaseModel):
    CompatibleArchitectures: Optional[CfnStringList] = None
    CompatibleRuntimes: Optional[CfnStringList] = None
    ContentUri: Union[ContentUriItem, str]
    Description: Optional[CfnString] = None
    LayerName: Optional[CfnString] = None
    LicenseInfo: Optional[CfnString] = None
    RetentionPolicy: Optional[CfnString] = None


class AwsServerlessLayerVersion(BaseModel):
    Properties: Properties6
    Type: Type6


class Properties13(BaseModel):
    DeadLetterConfig: Optional[Any] = None
    EventBusName: Optional[CfnString] = None
    Input: Optional[CfnString] = None
    InputPath: Optional[CfnString] = None
    Pattern: CfnJson
    RetryPolicy: Optional[EventsRuleRetryPolicy] = None
    Target: Optional[Target] = None


class EventBridgeRuleEvent(BaseModel):
    Properties: Properties13
    Type: Type13


class VpcConfig(BaseModel):
    __root__: VpcConfig1


class Properties4(BaseModel):
    Architectures: Optional[CfnStringList] = None
    AssumeRolePolicyDocument: Optional[Any] = None
    AutoPublishAlias: Optional[Union[Ref, FnJoin, FnSub, FnGetAtt, FnIf, FnFindInMap, FnSelect, str]] = None
    AutoPublishCodeSha256: Optional[Union[Ref, FnJoin, FnSub, FnGetAtt, FnIf, FnFindInMap, FnSelect, str]] = None
    CodeSigningConfigArn: Optional[CfnStringList] = None
    CodeUri: Optional[Union[FunctionCode, str]] = None
    DeadLetterQueue: Optional[DeadLetterQueue] = None
    DeploymentPreference: Optional[DeploymentPreference] = None
    Description: Optional[CfnString] = None
    Environment: Optional[Environment] = None
    EphemeralStorage: Optional[Any] = None
    EventInvokeConfig: Optional[Any] = None
    Events: Optional[
        Dict[
            str,
            Union[
                ApiEvent,
                S3Event,
                SnsEvent,
                KinesisEvent,
                DynamoDbEvent,
                SqsEvent,
                ScheduleEvent,
                CloudWatchEvent,
                EventBridgeRuleEvent,
                CloudWatchLogsEvent,
                IotRuleEvent,
                AlexaSkillEvent,
                CognitoEvent,
                HttpApiEvent,
                MskEvent,
                MqEvent,
                SelfManagedKafkaEvent,
            ],
        ]
    ] = None
    FileSystemConfigs: Optional[List[FileSystemConfig]] = None
    FunctionName: Optional[CfnString] = None
    FunctionUrlConfig: Optional[FunctionUrlConfig] = None
    Handler: Optional[CfnString] = None
    ImageConfig: Optional[Any] = None
    ImageUri: Optional[CfnString] = None
    InlineCode: Optional[CfnString] = None
    KmsKeyArn: Optional[CfnString] = None
    Layers: Optional[CfnStringList] = None
    MemorySize: Optional[CfnInteger] = None
    PackageType: Optional[CfnString] = None
    PermissionsBoundary: Optional[CfnString] = None
    Policies: Optional[Any] = None
    ProvisionedConcurrencyConfig: Optional[Any] = None
    ReservedConcurrentExecutions: Optional[CfnInteger] = None
    Role: Optional[CfnString] = None
    Runtime: Optional[CfnString] = None
    Tags: Optional[Dict[str, CfnString1]] = None
    Timeout: Optional[CfnInteger] = None
    Tracing: Optional[Union[Ref, FnJoin, FnSub, FnGetAtt, FnIf, FnFindInMap, FnSelect, str]] = None
    VersionDescription: Optional[str] = None
    VpcConfig: Optional[VpcConfig] = None


class AwsServerlessFunction(BaseModel):
    Properties: Optional[Properties4] = None
    Type: Type4


class Model(BaseModel):
    AWSTemplateFormatVersion: Optional[str] = None
    Conditions: Optional[Any] = None
    Description: Optional[str] = None
    Globals: Optional[Any] = None
    Mappings: Optional[Any] = None
    Metadata: Optional[Any] = None
    Outputs: Optional[Any] = None
    Parameters: Optional[Any] = None
    Resources: Dict[
        str,
        Union[
            AwsServerlessApi,
            AwsServerlessApplication,
            AwsServerlessFunction,
            AwsServerlessHttpApi,
            AwsServerlessLayerVersion,
            AwsServerlessSimpleTable,
            AwsServerlessStateMachine,
            Partial,
        ],
    ]
    Transform: Optional[str] = None


if __name__ == "__main__":
    print(Model.schema_json(indent=2))
