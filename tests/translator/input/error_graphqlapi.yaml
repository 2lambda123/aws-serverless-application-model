Transform: AWS::Serverless-2016-10-31
Resources:
  NoAuthAPI:
    Type: AWS::Serverless::GraphQLApi
    Properties:
      XrayEnabled: true
      Tags:
        Key1: Value1
        Key2: Value2

  NoSchemaPropertiesAPI:
    Type: AWS::Serverless::GraphQLApi
    Properties:
      XrayEnabled: true
      Auth:
        Type: AWS_IAM
      Tags:
        key1: value1
        key2: value2

  BothSchemaInlineAndUriAPI:
    Type: AWS::Serverless::GraphQLApi
    Properties:
      SchemaInline: |
        type Mutation {
          addTodo(id: ID!, name: String, description: String, priority: Int): Todo
        }
      SchemaUri: https://bucket-name.s3.region-code.amazonaws.com/key-name
      XrayEnabled: true
      Auth:
        Type: AWS_IAM
      Tags:
        key1: value1
        key2: value2

  GraphQLApiInvalidFieldInLogging:
    Type: AWS::Serverless::GraphQLApi
    Properties:
      SchemaInline: |
        type Mutation {
          addTodo(id: ID!, name: String, description: String, priority: Int): Todo
        }
      XrayEnabled: true
      Auth:
        Type: AWS_IAM
      Tags:
        key1: value1
        key2: value2
      Logging:
        CloudWatchLogsRoleArn: some-arn
        FieldLogLevel: ERROR
        ExcludeVerboseContent: true
        NotSupposedToBeHere: yo

  DataSourceNoServiceRoleArnOrTableArn:
    Type: AWS::Serverless::GraphQLApi
    Properties:
      Name: SomeApi
      SchemaInline: |
        type Mutation {
          addTodo(id: ID!, name: String, description: String, priority: Int): Todo
        }
      XrayEnabled: true
      Auth:
        Type: AWS_IAM
      Tags:
        key1: value1
        key2: value2
      DynamoDBDataSources:
        MyDataSource:
          TableName: some-table

  IdDefinedWithOtherProperties:
    Type: AWS::Serverless::GraphQLApi
    Properties:
      Name: SomeApi
      SchemaInline: |
        type Mutation {
          addTodo(id: ID!, name: String, description: String, priority: Int): Todo
        }
      Auth:
        Type: AWS_IAM
      DynamoDBDataSources:
        MyDataSource:
          TableName: some-table
          TableArn: big-arn
      Functions:
        IdNotMutuallyExclusive:
          Id: some-id
          DataSource: MyDataSource

  BothInlineCodeAndCodeUriDefined:
    Type: AWS::Serverless::GraphQLApi
    Properties:
      Name: SomeApi
      SchemaInline: |
        type Mutation {
          addTodo(id: ID!, name: String, description: String, priority: Int): Todo
        }
      Auth:
        Type: AWS_IAM
      DynamoDBDataSources:
        MyDataSource:
          TableName: some-table
          TableArn: big-arn
      Functions:
        BothCodeProperties:
          DataSource: MyDataSource
          InlineCode: blahblahblah
          CodeUri: MyCodeUri
          Runtime:
            Name: some-name
            Version: 1.2.3

  DataSourceAndDataSourceName:
    Type: AWS::Serverless::GraphQLApi
    Properties:
      Name: SomeApi
      SchemaInline: |
        type Mutation {
          addTodo(id: ID!, name: String, description: String, priority: Int): Todo
        }
      Auth:
        Type: AWS_IAM
      DynamoDBDataSources:
        MyDataSource:
          TableName: some-table
          TableArn: big-arn
      Functions:
        BothCodeProperties:
          DataSource: MyDataSource
          DataSourceName: some-datasource-name
          CodeUri: my-code

  NoDataSourceOrDataSourceName:
    Type: AWS::Serverless::GraphQLApi
    Properties:
      Name: SomeApi
      SchemaInline: |
        type Mutation {
          addTodo(id: ID!, name: String, description: String, priority: Int): Todo
        }
      Auth:
        Type: AWS_IAM
      Functions:
        NoDataSourceProperties:
          CodeUri: my-code

  NoInlineCodeOrCodeUriDefinedWithoutResolverCodeSettings:
    Type: AWS::Serverless::GraphQLApi
    Properties:
      Name: SomeApi
      SchemaInline: |
        type Mutation {
          addTodo(id: ID!, name: String, description: String, priority: Int): Todo
        }
      Auth:
        Type: AWS_IAM
      DynamoDBDataSources:
        MyDataSource:
          TableName: some-table
          TableArn: big-arn
      Functions:
        BothCodeProperties:
          DataSource: MyDataSource

  RuntimeNotDefined:
    Type: AWS::Serverless::GraphQLApi
    Properties:
      Name: SomeApi
      SchemaInline: |
        type Mutation {
          addTodo(id: ID!, name: String, description: String, priority: Int): Todo
        }
      Auth:
        Type: AWS_IAM
      DynamoDBDataSources:
        MyDataSource:
          TableName: some-table
          TableArn: big-arn
      Functions:
        NoRuntime:
          DataSource: MyDataSource
          InlineCode: blahblahblah
