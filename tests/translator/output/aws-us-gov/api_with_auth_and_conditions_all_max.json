{
  "Conditions": {
    "PathCondition": {
      "Fn::Equals": [
        true,
        true
      ]
    }
  },
  "Resources": {
    "MyFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "sam-demo-bucket",
          "S3Key": "thumbnails.zip"
        },
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "MyFunctionRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs8.10",
        "Tags": [
          {
            "Key": "lambda:createdBy",
            "Value": "SAM"
          }
        ]
      }
    },
    "MyFunctionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole"
              ],
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              }
            }
          ]
        },
        "ManagedPolicyArns": [
          "arn:aws-us-gov:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        ]
      }
    },
    "MyFunctionWithNoAuthorizerPermissionTest": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:invokeFunction",
        "FunctionName": {
          "Ref": "MyFunction"
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Sub": [
            "arn:aws-us-gov:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/GET/",
            {
              "__ApiId__": {
                "Ref": "MyApi"
              },
              "__Stage__": "*"
            }
          ]
        }
      }
    },
    "MyFunctionWithNoAuthorizerPermissionProd": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:invokeFunction",
        "FunctionName": {
          "Ref": "MyFunction"
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Sub": [
            "arn:aws-us-gov:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/GET/",
            {
              "__ApiId__": {
                "Ref": "MyApi"
              },
              "__Stage__": "Prod"
            }
          ]
        }
      }
    },
    "MyFunctionWithCognitoMultipleUserPoolsAuthorizerPermissionTest": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:invokeFunction",
        "FunctionName": {
          "Ref": "MyFunction"
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Sub": [
            "arn:aws-us-gov:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/POST/users",
            {
              "__ApiId__": {
                "Ref": "MyApi"
              },
              "__Stage__": "*"
            }
          ]
        }
      }
    },
    "MyFunctionWithCognitoMultipleUserPoolsAuthorizerPermissionProd": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:invokeFunction",
        "FunctionName": {
          "Ref": "MyFunction"
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Sub": [
            "arn:aws-us-gov:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/POST/users",
            {
              "__ApiId__": {
                "Ref": "MyApi"
              },
              "__Stage__": "Prod"
            }
          ]
        }
      }
    },
    "MyFunctionWithLambdaTokenAuthorizerPermissionTest": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:invokeFunction",
        "FunctionName": {
          "Ref": "MyFunction"
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Sub": [
            "arn:aws-us-gov:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/GET/users",
            {
              "__ApiId__": {
                "Ref": "MyApi"
              },
              "__Stage__": "*"
            }
          ]
        }
      }
    },
    "MyFunctionWithLambdaTokenAuthorizerPermissionProd": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:invokeFunction",
        "FunctionName": {
          "Ref": "MyFunction"
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Sub": [
            "arn:aws-us-gov:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/GET/users",
            {
              "__ApiId__": {
                "Ref": "MyApi"
              },
              "__Stage__": "Prod"
            }
          ]
        }
      }
    },
    "MyFunctionWithConditional": {
      "Type": "AWS::Lambda::Function",
      "Condition": "PathCondition",
      "Properties": {
        "Code": {
          "S3Bucket": "sam-demo-bucket",
          "S3Key": "thumbnails.zip"
        },
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "MyFunctionWithConditionalRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs8.10",
        "Tags": [
          {
            "Key": "lambda:createdBy",
            "Value": "SAM"
          }
        ]
      }
    },
    "MyFunctionWithConditionalRole": {
      "Type": "AWS::IAM::Role",
      "Condition": "PathCondition",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole"
              ],
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              }
            }
          ]
        },
        "ManagedPolicyArns": [
          "arn:aws-us-gov:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        ]
      }
    },
    "MyFunctionWithConditionalWithLambdaTokenAuthorizerPermissionTest": {
      "Type": "AWS::Lambda::Permission",
      "Condition": "PathCondition",
      "Properties": {
        "Action": "lambda:invokeFunction",
        "FunctionName": {
          "Ref": "MyFunctionWithConditional"
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Sub": [
            "arn:aws-us-gov:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/PATCH/users",
            {
              "__ApiId__": {
                "Ref": "MyApi"
              },
              "__Stage__": "*"
            }
          ]
        }
      }
    },
    "MyFunctionWithConditionalWithLambdaTokenAuthorizerPermissionProd": {
      "Type": "AWS::Lambda::Permission",
      "Condition": "PathCondition",
      "Properties": {
        "Action": "lambda:invokeFunction",
        "FunctionName": {
          "Ref": "MyFunctionWithConditional"
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Sub": [
            "arn:aws-us-gov:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/PATCH/users",
            {
              "__ApiId__": {
                "Ref": "MyApi"
              },
              "__Stage__": "Prod"
            }
          ]
        }
      }
    },
    "MyFunctionWithConditionalWithLambdaRequestAuthorizerPermissionTest": {
      "Type": "AWS::Lambda::Permission",
      "Condition": "PathCondition",
      "Properties": {
        "Action": "lambda:invokeFunction",
        "FunctionName": {
          "Ref": "MyFunctionWithConditional"
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Sub": [
            "arn:aws-us-gov:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/DELETE/users",
            {
              "__ApiId__": {
                "Ref": "MyApi"
              },
              "__Stage__": "*"
            }
          ]
        }
      }
    },
    "MyFunctionWithConditionalWithLambdaRequestAuthorizerPermissionProd": {
      "Type": "AWS::Lambda::Permission",
      "Condition": "PathCondition",
      "Properties": {
        "Action": "lambda:invokeFunction",
        "FunctionName": {
          "Ref": "MyFunctionWithConditional"
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Sub": [
            "arn:aws-us-gov:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/DELETE/users",
            {
              "__ApiId__": {
                "Ref": "MyApi"
              },
              "__Stage__": "Prod"
            }
          ]
        }
      }
    },
    "MyFunctionWithConditionalWithDefaultAuthorizerPermissionTest": {
      "Type": "AWS::Lambda::Permission",
      "Condition": "PathCondition",
      "Properties": {
        "Action": "lambda:invokeFunction",
        "FunctionName": {
          "Ref": "MyFunctionWithConditional"
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Sub": [
            "arn:aws-us-gov:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/PUT/users",
            {
              "__ApiId__": {
                "Ref": "MyApi"
              },
              "__Stage__": "*"
            }
          ]
        }
      }
    },
    "MyFunctionWithConditionalWithDefaultAuthorizerPermissionProd": {
      "Type": "AWS::Lambda::Permission",
      "Condition": "PathCondition",
      "Properties": {
        "Action": "lambda:invokeFunction",
        "FunctionName": {
          "Ref": "MyFunctionWithConditional"
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Sub": [
            "arn:aws-us-gov:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/PUT/users",
            {
              "__ApiId__": {
                "Ref": "MyApi"
              },
              "__Stage__": "Prod"
            }
          ]
        }
      }
    },
    "MyApi": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Body": {
          "swagger": "2.0",
          "info": {
            "version": "1.0",
            "title": {
              "Ref": "AWS::StackName"
            }
          },
          "paths": {
            "/": {
              "get": {
                "x-amazon-apigateway-integration": {
                  "type": "aws_proxy",
                  "httpMethod": "POST",
                  "uri": {
                    "Fn::Sub": "arn:aws-us-gov:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MyFunction.Arn}/invocations"
                  }
                },
                "responses": {},
                "security": [
                  {
                    "NONE": []
                  }
                ]
              }
            },
            "/users": {
              "post": {
                "x-amazon-apigateway-integration": {
                  "type": "aws_proxy",
                  "httpMethod": "POST",
                  "uri": {
                    "Fn::Sub": "arn:aws-us-gov:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MyFunction.Arn}/invocations"
                  }
                },
                "responses": {},
                "security": [
                  {
                    "MyCognitoAuthMultipleUserPools": []
                  }
                ]
              },
              "get": {
                "x-amazon-apigateway-integration": {
                  "type": "aws_proxy",
                  "httpMethod": "POST",
                  "uri": {
                    "Fn::Sub": "arn:aws-us-gov:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MyFunction.Arn}/invocations"
                  }
                },
                "responses": {},
                "security": [
                  {
                    "MyLambdaTokenAuth": []
                  }
                ]
              },
              "patch": {
                "Fn::If": [
                  "PathCondition",
                  {
                    "x-amazon-apigateway-integration": {
                      "type": "aws_proxy",
                      "httpMethod": "POST",
                      "uri": {
                        "Fn::If": [
                          "PathCondition",
                          {
                            "Fn::Sub": "arn:aws-us-gov:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MyFunctionWithConditional.Arn}/invocations"
                          },
                          {
                            "Ref": "AWS::NoValue"
                          }
                        ]
                      }
                    },
                    "responses": {},
                    "security": [
                      {
                        "MyLambdaTokenAuthNoneFunctionInvokeRole": []
                      }
                    ]
                  },
                  {
                    "Ref": "AWS::NoValue"
                  }
                ]
              },
              "delete": {
                "Fn::If": [
                  "PathCondition",
                  {
                    "x-amazon-apigateway-integration": {
                      "type": "aws_proxy",
                      "httpMethod": "POST",
                      "uri": {
                        "Fn::If": [
                          "PathCondition",
                          {
                            "Fn::Sub": "arn:aws-us-gov:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MyFunctionWithConditional.Arn}/invocations"
                          },
                          {
                            "Ref": "AWS::NoValue"
                          }
                        ]
                      }
                    },
                    "responses": {},
                    "security": [
                      {
                        "MyLambdaRequestAuth": []
                      }
                    ]
                  },
                  {
                    "Ref": "AWS::NoValue"
                  }
                ]
              },
              "put": {
                "Fn::If": [
                  "PathCondition",
                  {
                    "x-amazon-apigateway-integration": {
                      "type": "aws_proxy",
                      "httpMethod": "POST",
                      "uri": {
                        "Fn::If": [
                          "PathCondition",
                          {
                            "Fn::Sub": "arn:aws-us-gov:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MyFunctionWithConditional.Arn}/invocations"
                          },
                          {
                            "Ref": "AWS::NoValue"
                          }
                        ]
                      }
                    },
                    "responses": {},
                    "security": [
                      {
                        "MyCognitoAuth": []
                      }
                    ]
                  },
                  {
                    "Ref": "AWS::NoValue"
                  }
                ]
              }
            }
          },
          "securityDefinitions": {
            "MyCognitoAuth": {
              "type": "apiKey",
              "name": "MyAuthorizationHeader",
              "in": "header",
              "x-amazon-apigateway-authtype": "cognito_user_pools",
              "x-amazon-apigateway-authorizer": {
                "type": "cognito_user_pools",
                "providerARNs": [
                  "arn:aws:1"
                ],
                "identityValidationExpression": "myauthvalidationexpression"
              }
            },
            "MyCognitoAuthMultipleUserPools": {
              "type": "apiKey",
              "name": "MyAuthorizationHeader2",
              "in": "header",
              "x-amazon-apigateway-authtype": "cognito_user_pools",
              "x-amazon-apigateway-authorizer": {
                "type": "cognito_user_pools",
                "providerARNs": [
                  "arn:aws:2",
                  "arn:aws:3"
                ],
                "identityValidationExpression": "myauthvalidationexpression2"
              }
            },
            "MyLambdaTokenAuth": {
              "type": "apiKey",
              "name": "MyCustomAuthHeader",
              "in": "header",
              "x-amazon-apigateway-authtype": "custom",
              "x-amazon-apigateway-authorizer": {
                "type": "token",
                "authorizerUri": {
                  "Fn::Sub": [
                    "arn:aws-us-gov:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${__FunctionArn__}/invocations",
                    {
                      "__FunctionArn__": "arn:aws"
                    }
                  ]
                },
                "authorizerResultTtlInSeconds": 20,
                "authorizerCredentials": "arn:aws:iam::123456789012:role/S3Access",
                "identityValidationExpression": "mycustomauthexpression"
              }
            },
            "MyLambdaTokenAuthNoneFunctionInvokeRole": {
              "type": "apiKey",
              "name": "Authorization",
              "in": "header",
              "x-amazon-apigateway-authtype": "custom",
              "x-amazon-apigateway-authorizer": {
                "type": "token",
                "authorizerUri": {
                  "Fn::Sub": [
                    "arn:aws-us-gov:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${__FunctionArn__}/invocations",
                    {
                      "__FunctionArn__": "arn:aws"
                    }
                  ]
                },
                "authorizerResultTtlInSeconds": 0
              }
            },
            "MyLambdaRequestAuth": {
              "type": "apiKey",
              "name": "Unused",
              "in": "header",
              "x-amazon-apigateway-authtype": "custom",
              "x-amazon-apigateway-authorizer": {
                "type": "request",
                "authorizerUri": {
                  "Fn::Sub": [
                    "arn:aws-us-gov:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${__FunctionArn__}/invocations",
                    {
                      "__FunctionArn__": "arn:aws"
                    }
                  ]
                },
                "authorizerResultTtlInSeconds": 0,
                "authorizerCredentials": "arn:aws:iam::123456789012:role/S3Access",
                "identitySource": "method.request.header.Authorization1, method.request.querystring.Authorization2, stageVariables.Authorization3, context.Authorization4"
              }
            }
          }
        },
        "Parameters": {
          "endpointConfigurationTypes": "REGIONAL"
        },
        "EndpointConfiguration": {
          "Types": [
            "REGIONAL"
          ]
        }
      }
    },
    "MyApiDeployment0b4dd1a6aa": {
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "Description": "RestApi deployment id: 0b4dd1a6aa5c498fd364c622a5131309fd405f4a",
        "RestApiId": {
          "Ref": "MyApi"
        },
        "StageName": "Stage"
      }
    },
    "MyApiProdStage": {
      "Type": "AWS::ApiGateway::Stage",
      "Properties": {
        "DeploymentId": {
          "Ref": "MyApiDeployment0b4dd1a6aa"
        },
        "RestApiId": {
          "Ref": "MyApi"
        },
        "StageName": "Prod"
      }
    },
    "MyApiMyLambdaTokenAuthAuthorizerPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:invokeFunction",
        "FunctionName": "arn:aws",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Sub": [
            "arn:aws-us-gov:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/authorizers/*",
            {
              "__ApiId__": {
                "Ref": "MyApi"
              }
            }
          ]
        }
      }
    },
    "MyApiMyLambdaTokenAuthNoneFunctionInvokeRoleAuthorizerPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:invokeFunction",
        "FunctionName": "arn:aws",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Sub": [
            "arn:aws-us-gov:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/authorizers/*",
            {
              "__ApiId__": {
                "Ref": "MyApi"
              }
            }
          ]
        }
      }
    },
    "MyApiMyLambdaRequestAuthAuthorizerPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:invokeFunction",
        "FunctionName": "arn:aws",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Sub": [
            "arn:aws-us-gov:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/authorizers/*",
            {
              "__ApiId__": {
                "Ref": "MyApi"
              }
            }
          ]
        }
      }
    }
  }
}