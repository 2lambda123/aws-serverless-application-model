{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Conditions": {
    "ServerlessRestApiCondition": {
      "Fn::Or": [
        {
          "Condition": "implicithello1condition"
        },
        {
          "Condition": "implicithello2condition"
        }
      ]
    },
    "explicithello2condition": {
      "Fn::Equals": [
        true,
        false
      ]
    },
    "implicithello1condition": {
      "Fn::Equals": [
        true,
        false
      ]
    },
    "implicithello2condition": {
      "Fn::Equals": [
        true,
        false
      ]
    },
    "explicithello1condition": {
      "Fn::Equals": [
        true,
        false
      ]
    }
  },
  "Resources": {
    "explicithello2": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "exports.handler = async () => \u2018Hello World!'\n"
        },
        "Tags": [
          {
            "Value": "SAM",
            "Key": "lambda:createdBy"
          }
        ],
        "MemorySize": 128,
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "explicithello2Role",
            "Arn"
          ]
        },
        "Timeout": 3,
        "Runtime": "nodejs12.x"
      },
      "Condition": "explicithello2condition"
    },
    "implicithello2Role": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        ],
        "Tags": [
          {
            "Value": "SAM",
            "Key": "lambda:createdBy"
          }
        ],
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole"
              ],
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              }
            }
          ]
        }
      },
      "Condition": "implicithello2condition"
    },
    "explicithello1": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "exports.handler = async () => \u2018Hello World!'\n"
        },
        "Tags": [
          {
            "Value": "SAM",
            "Key": "lambda:createdBy"
          }
        ],
        "MemorySize": 128,
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "explicithello1Role",
            "Arn"
          ]
        },
        "Timeout": 3,
        "Runtime": "nodejs12.x"
      },
      "Condition": "explicithello1condition"
    },
    "explicitapiProdStage": {
      "Type": "AWS::ApiGateway::Stage",
      "Properties": {
        "DeploymentId": {
          "Ref": "explicitapiDeployment6d637c9442"
        },
        "RestApiId": {
          "Ref": "explicitapi"
        },
        "StageName": "Prod"
      }
    },
    "ServerlessRestApiProdStage": {
      "Type": "AWS::ApiGateway::Stage",
      "Properties": {
        "DeploymentId": {
          "Ref": "ServerlessRestApiDeployment887b2aec6d"
        },
        "RestApiId": {
          "Ref": "ServerlessRestApi"
        },
        "StageName": "Prod"
      },
      "Condition": "ServerlessRestApiCondition"
    },
    "explicithello1ApiEventPermissionProd": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "FunctionName": {
          "Ref": "explicithello1"
        },
        "SourceArn": {
          "Fn::Sub": [
            "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/GET/explicit/hello1",
            {
              "__Stage__": "*",
              "__ApiId__": {
                "Ref": "explicitapi"
              }
            }
          ]
        }
      },
      "Condition": "explicithello1condition"
    },
    "implicithello2": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "exports.handler = async () => \u2018Hello World!'\n"
        },
        "Tags": [
          {
            "Value": "SAM",
            "Key": "lambda:createdBy"
          }
        ],
        "MemorySize": 128,
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "implicithello2Role",
            "Arn"
          ]
        },
        "Timeout": 3,
        "Runtime": "nodejs12.x"
      },
      "Condition": "implicithello2condition"
    },
    "implicithello1ApiEventPermissionProd": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "FunctionName": {
          "Ref": "implicithello1"
        },
        "SourceArn": {
          "Fn::Sub": [
            "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/GET/implicit/hello1",
            {
              "__Stage__": "*",
              "__ApiId__": {
                "Ref": "ServerlessRestApi"
              }
            }
          ]
        }
      },
      "Condition": "implicithello1condition"
    },
    "explicithello2Role": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        ],
        "Tags": [
          {
            "Value": "SAM",
            "Key": "lambda:createdBy"
          }
        ],
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole"
              ],
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              }
            }
          ]
        }
      },
      "Condition": "explicithello2condition"
    },
    "implicithello1": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "exports.handler = async () => \u2018Hello World!'\n"
        },
        "Tags": [
          {
            "Value": "SAM",
            "Key": "lambda:createdBy"
          }
        ],
        "MemorySize": 128,
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "implicithello1Role",
            "Arn"
          ]
        },
        "Timeout": 3,
        "Runtime": "nodejs12.x"
      },
      "Condition": "implicithello1condition"
    },
    "explicithello2ApiEventPermissionProd": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "FunctionName": {
          "Ref": "explicithello2"
        },
        "SourceArn": {
          "Fn::Sub": [
            "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/GET/explicit/hello2",
            {
              "__Stage__": "*",
              "__ApiId__": {
                "Ref": "explicitapi"
              }
            }
          ]
        }
      },
      "Condition": "explicithello2condition"
    },
    "explicitapi": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Body": {
          "info": {
            "version": "1.0",
            "title": {
              "Ref": "AWS::StackName"
            }
          },
          "paths": {
            "/explicit/hello2": {
              "Fn::If": [
                "explicithello2condition",
                {
                  "get": {
                    "Fn::If": [
                      "explicithello2condition",
                      {
                        "x-amazon-apigateway-integration": {
                          "httpMethod": "POST",
                          "type": "aws_proxy",
                          "uri": {
                            "Fn::If": [
                              "explicithello2condition",
                              {
                                "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${explicithello2.Arn}/invocations"
                              },
                              {
                                "Ref": "AWS::NoValue"
                              }
                            ]
                          }
                        },
                        "responses": {}
                      },
                      {
                        "Ref": "AWS::NoValue"
                      }
                    ]
                  }
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            },
            "/explicit/hello1": {
              "Fn::If": [
                "explicithello1condition",
                {
                  "get": {
                    "Fn::If": [
                      "explicithello1condition",
                      {
                        "x-amazon-apigateway-integration": {
                          "httpMethod": "POST",
                          "type": "aws_proxy",
                          "uri": {
                            "Fn::If": [
                              "explicithello1condition",
                              {
                                "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${explicithello1.Arn}/invocations"
                              },
                              {
                                "Ref": "AWS::NoValue"
                              }
                            ]
                          }
                        },
                        "responses": {}
                      },
                      {
                        "Ref": "AWS::NoValue"
                      }
                    ]
                  }
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            }
          },
          "swagger": "2.0"
        }
      }
    },
    "implicithello2ApiEventPermissionProd": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "FunctionName": {
          "Ref": "implicithello2"
        },
        "SourceArn": {
          "Fn::Sub": [
            "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/GET/implicit/hello2",
            {
              "__Stage__": "*",
              "__ApiId__": {
                "Ref": "ServerlessRestApi"
              }
            }
          ]
        }
      },
      "Condition": "implicithello2condition"
    },
    "explicithello1Role": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        ],
        "Tags": [
          {
            "Value": "SAM",
            "Key": "lambda:createdBy"
          }
        ],
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole"
              ],
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              }
            }
          ]
        }
      },
      "Condition": "explicithello1condition"
    },
    "ServerlessRestApi": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Body": {
          "info": {
            "version": "1.0",
            "title": {
              "Ref": "AWS::StackName"
            }
          },
          "paths": {
            "/implicit/hello1": {
              "Fn::If": [
                "implicithello1condition",
                {
                  "get": {
                    "Fn::If": [
                      "implicithello1condition",
                      {
                        "x-amazon-apigateway-integration": {
                          "httpMethod": "POST",
                          "type": "aws_proxy",
                          "uri": {
                            "Fn::If": [
                              "implicithello1condition",
                              {
                                "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${implicithello1.Arn}/invocations"
                              },
                              {
                                "Ref": "AWS::NoValue"
                              }
                            ]
                          }
                        },
                        "responses": {}
                      },
                      {
                        "Ref": "AWS::NoValue"
                      }
                    ]
                  }
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            },
            "/implicit/hello2": {
              "Fn::If": [
                "implicithello2condition",
                {
                  "get": {
                    "Fn::If": [
                      "implicithello2condition",
                      {
                        "x-amazon-apigateway-integration": {
                          "httpMethod": "POST",
                          "type": "aws_proxy",
                          "uri": {
                            "Fn::If": [
                              "implicithello2condition",
                              {
                                "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${implicithello2.Arn}/invocations"
                              },
                              {
                                "Ref": "AWS::NoValue"
                              }
                            ]
                          }
                        },
                        "responses": {}
                      },
                      {
                        "Ref": "AWS::NoValue"
                      }
                    ]
                  }
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            }
          },
          "swagger": "2.0"
        }
      },
      "Condition": "ServerlessRestApiCondition"
    },
    "implicithello1Role": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        ],
        "Tags": [
          {
            "Value": "SAM",
            "Key": "lambda:createdBy"
          }
        ],
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole"
              ],
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              }
            }
          ]
        }
      },
      "Condition": "implicithello1condition"
    },
    "ServerlessRestApiDeployment887b2aec6d": {
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": {
          "Ref": "ServerlessRestApi"
        },
        "Description": "RestApi deployment id: 887b2aec6d4dce31236432b538163caca39ef0cb",
        "StageName": "Stage"
      },
      "Condition": "ServerlessRestApiCondition"
    },
    "explicitapiDeployment6d637c9442": {
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": {
          "Ref": "explicitapi"
        },
        "Description": "RestApi deployment id: 6d637c9442463766f49790e426cef1f8a0a787bb",
        "StageName": "Stage"
      }
    }
  },
  "Description": "A template to test for API condition handling with a mix of explicit and implicit api events."
}