{
  "Conditions": {
    "QueueCreationDisabled": {
      "Fn::Equals": [
        {
          "Ref": "UseExistingQueue"
        }, 
        true
      ]
    }
  }, 
  "Parameters": {
    "UseExistingQueue": {
      "Default": true, 
      "Type": "String", 
      "AllowedValues": [
        true, 
        false
      ]
    }, 
    "SQSArn": {
      "Default": "my-sqs-arn", 
      "Type": "String"
    }
  }, 
  "Resources": {
    "DestinationLambdaRole": {
      "Type": "AWS::IAM::Role", 
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17", 
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole"
              ], 
              "Effect": "Allow", 
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              }
            }
          ]
        }, 
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        ], 
        "Tags": [
          {
            "Value": "SAM", 
            "Key": "lambda:createdBy"
          }
        ]
      }
    }, 
    "MyTestFunctionEventInvokeConfigOnSuccessQueue": {
      "Type": "AWS::SQS::Queue", 
      "Properties": {}
    }, 
    "MyTestFunctionEventInvokeConfig": {
      "Type": "AWS::Lambda::EventInvokeConfig", 
      "Properties": {
        "MaximumEventAgeInSeconds": 70, 
        "MaximumRetryAttempts": 1, 
        "DestinationConfig": {
          "OnSuccess": {
            "Destination": {
              "Fn::GetAtt": [
                "MyTestFunctionEventInvokeConfigOnSuccessQueue", 
                "Arn"
              ]
            }
          }, 
          "OnFailure": {
            "Destination": {
              "Fn::If": [
                "QueueCreationDisabled", 
                {
                  "Fn::GetAtt": [
                    "DestinationLambda", 
                    "Arn"
                  ]
                }, 
                "some-function-arn"
              ]
            }
          }
        }, 
        "FunctionName": {
          "Ref": "MyTestFunction"
        }, 
        "Qualifier": "$LATEST"
      }
    }, 
    "MyTestFunction": {
      "Type": "AWS::Lambda::Function", 
      "Properties": {
        "Code": {
          "ZipFile": "exports.handler = function(event, context, callback) {\n  var event_received_at = new Date().toISOString();\n  console.log('Event received at: ' + event_received_at);\n  console.log('Received event:', JSON.stringify(event, null, 2));\n\n  if (event.Success) {\n      console.log(\"Success\");\n      context.callbackWaitsForEmptyEventLoop = false;\n      callback(null);\n  } else {\n      console.log(\"Failure\");\n      context.callbackWaitsForEmptyEventLoop = false;\n      callback(new Error(\"Failure from event, Success = false, I am failing!\"), 'Destination Function Error Thrown');\n  }\n};      \n"
        }, 
        "Tags": [
          {
            "Value": "SAM", 
            "Key": "lambda:createdBy"
          }
        ], 
        "MemorySize": 1024, 
        "Handler": "index.handler", 
        "Role": {
          "Fn::GetAtt": [
            "MyTestFunctionRole", 
            "Arn"
          ]
        }, 
        "Runtime": "nodejs10.x"
      }
    }, 
    "DestinationLambda": {
      "Type": "AWS::Lambda::Function", 
      "Properties": {
        "Code": {
          "ZipFile": "exports.handler = async (event) => {\n  const response = {\n    statusCode: 200,\n    body: JSON.stringify('Hello from Lambda!'),\n  };\n  return response;\n};\n"
        }, 
        "Tags": [
          {
            "Value": "SAM", 
            "Key": "lambda:createdBy"
          }
        ], 
        "MemorySize": 1024, 
        "Handler": "index.handler", 
        "Role": {
          "Fn::GetAtt": [
            "DestinationLambdaRole", 
            "Arn"
          ]
        }, 
        "Runtime": "nodejs10.x"
      }
    }, 
    "MyTestFunctionRole": {
      "Type": "AWS::IAM::Role", 
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17", 
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole"
              ], 
              "Effect": "Allow", 
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              }
            }
          ]
        }, 
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        ], 
        "Policies": [
          {
            "PolicyName": "MyTestFunctionEventInvokeConfigSQSPolicy", 
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": "sqs:SendMessage", 
                  "Resource": {
                    "Fn::GetAtt": [
                      "MyTestFunctionEventInvokeConfigOnSuccessQueue", 
                      "Arn"
                    ]
                  }, 
                  "Effect": "Allow"
                }
              ]
            }
          }, 
          {
            "PolicyName": "MyTestFunctionEventInvokeConfigLambdaPolicy", 
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": "lambda:InvokeFunction", 
                  "Resource": {
                    "Fn::If": [
                      "QueueCreationDisabled", 
                      {
                        "Fn::GetAtt": [
                          "DestinationLambda", 
                          "Arn"
                        ]
                      }, 
                      "some-function-arn"
                    ]
                  }, 
                  "Effect": "Allow"
                }
              ]
            }
          }
        ], 
        "Tags": [
          {
            "Value": "SAM", 
            "Key": "lambda:createdBy"
          }
        ]
      }
    }
  }
}